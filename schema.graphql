# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"An object with an ID"
interface Node {
    "The id of the object."
    id: ID!
}

type AddToFilmPlanetsPayload {
    filmsFilm: Film
    planetsPlanet: Planet
}

type AddToFilmSpeciesPayload {
    filmsFilm: Film
    speciesSpecies: Species
}

type AddToFilmStarshipsPayload {
    filmsFilm: Film
    starshipsStarship: Starship
}

type AddToFilmVehiclesPayload {
    filmsFilm: Film
    vehiclesVehicle: Vehicle
}

type AddToPeopleFilmPayload {
    charactersPerson: Person
    filmsFilm: Film
}

type AddToPeoplePlanetPayload {
    homeworldPlanet: Planet
    residentsPerson: Person
}

type AddToPeopleSpeciesPayload {
    peoplePerson: Person
    speciesSpecies: Species
}

type AddToPeopleStarshipsPayload {
    pilotsPerson: Person
    starshipsStarship: Starship
}

type AddToPeopleVehiclesPayload {
    pilotsPerson: Person
    vehiclesVehicle: Vehicle
}

"System model for Assets"
type Asset implements Node {
    createdAt: DateTime!
    "Original File Name"
    fileName: String!
    "The File Handle"
    handle: String!
    "The height of the file in case it is an image"
    height: Float
    id: ID!
    "The Mime Type"
    mimeType: String
    "The Size Of The File"
    size: Float!
    updatedAt: DateTime!
    "The Url Of The Asset"
    url: String!
    "The width of the file in case it is an image"
    width: Float
}

type AssetPreviousValues {
    createdAt: DateTime!
    "Original File Name"
    fileName: String!
    "The File Handle"
    handle: String!
    "The height of the file in case it is an image"
    height: Float
    id: ID!
    "The Mime Type"
    mimeType: String
    "The Size Of The File"
    size: Float!
    updatedAt: DateTime!
    "The Url Of The Asset"
    url: String!
    "The width of the file in case it is an image"
    width: Float
}

type AssetSubscriptionPayload {
    mutation: _ModelMutationType!
    node: Asset
    previousValues: AssetPreviousValues
    updatedFields: [String!]
}

"A Film is a single film."
type Film implements Node {
    "Meta information about the query."
    _charactersMeta(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _planetsMeta(after: String, before: String, filter: PlanetFilter, first: Int, last: Int, orderBy: PlanetOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _speciesMeta(after: String, before: String, filter: SpeciesFilter, first: Int, last: Int, orderBy: SpeciesOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _starshipsMeta(after: String, before: String, filter: StarshipFilter, first: Int, last: Int, orderBy: StarshipOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _vehiclesMeta(after: String, before: String, filter: VehicleFilter, first: Int, last: Int, orderBy: VehicleOrderBy, skip: Int): _QueryMeta!
    characters(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): [Person!]
    createdAt: DateTime!
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int!
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    planets(after: String, before: String, filter: PlanetFilter, first: Int, last: Int, orderBy: PlanetOrderBy, skip: Int): [Planet!]
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    species(after: String, before: String, filter: SpeciesFilter, first: Int, last: Int, orderBy: SpeciesOrderBy, skip: Int): [Species!]
    starships(after: String, before: String, filter: StarshipFilter, first: Int, last: Int, orderBy: StarshipOrderBy, skip: Int): [Starship!]
    "The title of this film"
    title: String!
    updatedAt: DateTime!
    vehicles(after: String, before: String, filter: VehicleFilter, first: Int, last: Int, orderBy: VehicleOrderBy, skip: Int): [Vehicle!]
}

type FilmPreviousValues {
    createdAt: DateTime!
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int!
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    "The title of this film"
    title: String!
    updatedAt: DateTime!
}

type FilmSubscriptionPayload {
    mutation: _ModelMutationType!
    node: Film
    previousValues: FilmPreviousValues
    updatedFields: [String!]
}

type InvokeFunctionPayload {
    clientMutationId: String
    result: String!
}

type Mutation {
    addToFilmPlanets(filmsFilmId: ID!, planetsPlanetId: ID!): AddToFilmPlanetsPayload
    addToFilmSpecies(filmsFilmId: ID!, speciesSpeciesId: ID!): AddToFilmSpeciesPayload
    addToFilmStarships(filmsFilmId: ID!, starshipsStarshipId: ID!): AddToFilmStarshipsPayload
    addToFilmVehicles(filmsFilmId: ID!, vehiclesVehicleId: ID!): AddToFilmVehiclesPayload
    addToPeopleFilm(charactersPersonId: ID!, filmsFilmId: ID!): AddToPeopleFilmPayload
    addToPeoplePlanet(homeworldPlanetId: ID!, residentsPersonId: ID!): AddToPeoplePlanetPayload
    addToPeopleSpecies(peoplePersonId: ID!, speciesSpeciesId: ID!): AddToPeopleSpeciesPayload
    addToPeopleStarships(pilotsPersonId: ID!, starshipsStarshipId: ID!): AddToPeopleStarshipsPayload
    addToPeopleVehicles(pilotsPersonId: ID!, vehiclesVehicleId: ID!): AddToPeopleVehiclesPayload
    createAsset(
        "Original File Name"
        fileName: String!,
        "The File Handle"
        handle: String!,
        "The height of the file in case it is an image"
        height: Float,
        "The Mime Type"
        mimeType: String,
        "The Size Of The File"
        size: Float!,
        "The Url Of The Asset"
        url: String!,
        "The width of the file in case it is an image"
        width: Float
    ): Asset
    createFilm(
        characters: [FilmcharactersPerson!],
        charactersIds: [ID!],
        "The name of the director of this film."
        director: String,
        "The episode number of this film."
        episodeId: Int!,
        "indicates if the record is published"
        isPublished: Boolean,
        "The opening paragraphs at the beginning of this film."
        openingCrawl: String,
        planets: [FilmplanetsPlanet!],
        planetsIds: [ID!],
        "The names of the producers of this film."
        producers: [String!],
        " The ISO 8601 date format of film release at original creator country."
        releaseDate: DateTime,
        species: [FilmspeciesSpecies!],
        speciesIds: [ID!],
        starships: [FilmstarshipsStarship!],
        starshipsIds: [ID!],
        "The title of this film"
        title: String!,
        vehicles: [FilmvehiclesVehicle!],
        vehiclesIds: [ID!]
    ): Film
    createPerson(
        "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
        birthYear: String,
        "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
        eyeColor: [PERSON_EYE_COLOR!],
        films: [PersonfilmsFilm!],
        filmsIds: [ID!],
        " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
        gender: PERSON_GENDER,
        "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
        hairColor: [PERSON_HAIR_COLOR!],
        "The height of the person in centimeters."
        height: Int,
        homeworld: PersonhomeworldPlanet,
        homeworldId: ID,
        "indicates if the record is published"
        isPublished: Boolean,
        "The mass of the person in kilograms."
        mass: Float,
        "The name of this person."
        name: String!,
        "The skin color of this person."
        skinColor: [PERSON_SKIN_COLOR!],
        species: [PersonspeciesSpecies!],
        speciesIds: [ID!],
        starships: [PersonstarshipsStarship!],
        starshipsIds: [ID!],
        vehicles: [PersonvehiclesVehicle!],
        vehiclesIds: [ID!]
    ): Person
    createPlanet(
        "The climate of this planet."
        climate: [String!],
        "The diameter of this planet in kilometers."
        diameter: Int,
        films: [PlanetfilmsFilm!],
        filmsIds: [ID!],
        "A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs."
        gravity: String,
        "indicates if the record is published"
        isPublished: Boolean,
        "The name of the planet"
        name: String!,
        "The number of standard days it takes for this planet to complete a single orbit of its local star."
        orbitalPeriod: Int,
        "The average population of sentient beings inhabiting this planet."
        population: Float,
        residents: [PlanetresidentsPerson!],
        residentsIds: [ID!],
        "The number of standard hours it takes for this planet to complete a single rotation on its axis."
        rotationPeriod: Int,
        "The percentage of the planet surface that is naturally occurring water or bodies of water."
        surfaceWater: Float,
        "The terrain of this planet."
        terrain: [String!]
    ): Planet
    createSpecies(
        "The average height of this species in centimeters."
        averageHeight: Int,
        "The average lifespan of this species in years."
        averageLifespan: Int,
        "The classification of this species, such as \"mammal\" or \"reptile\"."
        classification: String,
        "The designation of this species, such as \"sentient\"."
        designation: String,
        "The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
        eyeColor: [SPECIES_EYE_COLOR!],
        films: [SpeciesfilmsFilm!],
        filmsIds: [ID!],
        "The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
        hairColor: [SPECIES_HAIR_COLOR!],
        "indicates if the record is published"
        isPublished: Boolean,
        "The language commonly spoken by this species."
        language: String,
        "The name of this species."
        name: String!,
        people: [SpeciespeoplePerson!],
        peopleIds: [ID!],
        "The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
        skinColor: [SPECIES_SKIN_COLOR!]
    ): Species
    createStarship(
        "The maximum number of kilograms that this starship can transport."
        cargoCapacity: Float,
        "The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\""
        class: String,
        "The maximum length of time that this starship can provide consumables for its entire crew without having to resupply."
        consumables: String,
        " The cost of this starship new, in galactic credits."
        costInCredits: Float,
        "The number of personnel needed to run or pilot this starship."
        crew: Int,
        films: [StarshipfilmsFilm!],
        filmsIds: [ID!],
        "The class of this starships hyperdrive."
        hyperdriveRating: Float,
        "indicates if the record is published"
        isPublished: Boolean,
        "The length of this starship in meters."
        length: Float,
        "The manufacturer of this starship."
        manufacturer: [String!],
        " The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight."
        maxAtmospheringSpeed: Int,
        "The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe."
        mglt: Int,
        "The name of this starship. The common name, such as \"Death Star\"."
        name: String!,
        " The number of non-essential people this starship can transport."
        passengers: Int,
        pilots: [StarshippilotsPerson!],
        pilotsIds: [ID!]
    ): Starship
    createVehicle(
        "The maximum number of kilograms that this vehicle can transport."
        cargoCapacity: Int,
        " The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\"."
        class: String,
        "The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply."
        consumables: String,
        "The cost of this vehicle new, in Galactic Credits."
        costInCredits: Int,
        "The number of personnel needed to run or pilot this vehicle."
        crew: Int,
        films: [VehiclefilmsFilm!],
        filmsIds: [ID!],
        "indicates if the record is published"
        isPublished: Boolean,
        " The length of this vehicle in meters."
        length: Float,
        "The manufacturer of this vehicle."
        manufacturer: [String!],
        "The maximum speed of this vehicle in the atmosphere."
        maxAtmospheringSpeed: Int,
        "The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\"."
        model: String,
        "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
        name: String!,
        "The number of non-essential people this vehicle can transport."
        passengers: Int,
        pilots: [VehiclepilotsPerson!],
        pilotsIds: [ID!]
    ): Vehicle
    deleteAsset(id: ID!): Asset
    deleteFilm(id: ID!): Film
    deletePerson(id: ID!): Person
    deletePlanet(id: ID!): Planet
    deleteSpecies(id: ID!): Species
    deleteStarship(id: ID!): Starship
    deleteVehicle(id: ID!): Vehicle
    invokeFunction(input: InvokeFunctionInput!): InvokeFunctionPayload
    removeFromFilmPlanets(filmsFilmId: ID!, planetsPlanetId: ID!): RemoveFromFilmPlanetsPayload
    removeFromFilmSpecies(filmsFilmId: ID!, speciesSpeciesId: ID!): RemoveFromFilmSpeciesPayload
    removeFromFilmStarships(filmsFilmId: ID!, starshipsStarshipId: ID!): RemoveFromFilmStarshipsPayload
    removeFromFilmVehicles(filmsFilmId: ID!, vehiclesVehicleId: ID!): RemoveFromFilmVehiclesPayload
    removeFromPeopleFilm(charactersPersonId: ID!, filmsFilmId: ID!): RemoveFromPeopleFilmPayload
    removeFromPeoplePlanet(homeworldPlanetId: ID!, residentsPersonId: ID!): RemoveFromPeoplePlanetPayload
    removeFromPeopleSpecies(peoplePersonId: ID!, speciesSpeciesId: ID!): RemoveFromPeopleSpeciesPayload
    removeFromPeopleStarships(pilotsPersonId: ID!, starshipsStarshipId: ID!): RemoveFromPeopleStarshipsPayload
    removeFromPeopleVehicles(pilotsPersonId: ID!, vehiclesVehicleId: ID!): RemoveFromPeopleVehiclesPayload
    updateAsset(
        "Original File Name"
        fileName: String,
        "The File Handle"
        handle: String,
        "The height of the file in case it is an image"
        height: Float,
        id: ID!,
        "The Mime Type"
        mimeType: String,
        "The Size Of The File"
        size: Float,
        "The Url Of The Asset"
        url: String,
        "The width of the file in case it is an image"
        width: Float
    ): Asset
    updateFilm(
        characters: [FilmcharactersPerson!],
        charactersIds: [ID!],
        "The name of the director of this film."
        director: String,
        "The episode number of this film."
        episodeId: Int,
        id: ID!,
        "indicates if the record is published"
        isPublished: Boolean,
        "The opening paragraphs at the beginning of this film."
        openingCrawl: String,
        planets: [FilmplanetsPlanet!],
        planetsIds: [ID!],
        "The names of the producers of this film."
        producers: [String!],
        " The ISO 8601 date format of film release at original creator country."
        releaseDate: DateTime,
        species: [FilmspeciesSpecies!],
        speciesIds: [ID!],
        starships: [FilmstarshipsStarship!],
        starshipsIds: [ID!],
        "The title of this film"
        title: String,
        vehicles: [FilmvehiclesVehicle!],
        vehiclesIds: [ID!]
    ): Film
    updateOrCreateAsset(create: CreateAsset!, update: UpdateAsset!): Asset
    updateOrCreateFilm(create: CreateFilm!, update: UpdateFilm!): Film
    updateOrCreatePerson(create: CreatePerson!, update: UpdatePerson!): Person
    updateOrCreatePlanet(create: CreatePlanet!, update: UpdatePlanet!): Planet
    updateOrCreateSpecies(create: CreateSpecies!, update: UpdateSpecies!): Species
    updateOrCreateStarship(create: CreateStarship!, update: UpdateStarship!): Starship
    updateOrCreateVehicle(create: CreateVehicle!, update: UpdateVehicle!): Vehicle
    updatePerson(
        "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
        birthYear: String,
        "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
        eyeColor: [PERSON_EYE_COLOR!],
        films: [PersonfilmsFilm!],
        filmsIds: [ID!],
        " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
        gender: PERSON_GENDER,
        "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
        hairColor: [PERSON_HAIR_COLOR!],
        "The height of the person in centimeters."
        height: Int,
        homeworld: PersonhomeworldPlanet,
        homeworldId: ID,
        id: ID!,
        "indicates if the record is published"
        isPublished: Boolean,
        "The mass of the person in kilograms."
        mass: Float,
        "The name of this person."
        name: String,
        "The skin color of this person."
        skinColor: [PERSON_SKIN_COLOR!],
        species: [PersonspeciesSpecies!],
        speciesIds: [ID!],
        starships: [PersonstarshipsStarship!],
        starshipsIds: [ID!],
        vehicles: [PersonvehiclesVehicle!],
        vehiclesIds: [ID!]
    ): Person
    updatePlanet(
        "The climate of this planet."
        climate: [String!],
        "The diameter of this planet in kilometers."
        diameter: Int,
        films: [PlanetfilmsFilm!],
        filmsIds: [ID!],
        "A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs."
        gravity: String,
        id: ID!,
        "indicates if the record is published"
        isPublished: Boolean,
        "The name of the planet"
        name: String,
        "The number of standard days it takes for this planet to complete a single orbit of its local star."
        orbitalPeriod: Int,
        "The average population of sentient beings inhabiting this planet."
        population: Float,
        residents: [PlanetresidentsPerson!],
        residentsIds: [ID!],
        "The number of standard hours it takes for this planet to complete a single rotation on its axis."
        rotationPeriod: Int,
        "The percentage of the planet surface that is naturally occurring water or bodies of water."
        surfaceWater: Float,
        "The terrain of this planet."
        terrain: [String!]
    ): Planet
    updateSpecies(
        "The average height of this species in centimeters."
        averageHeight: Int,
        "The average lifespan of this species in years."
        averageLifespan: Int,
        "The classification of this species, such as \"mammal\" or \"reptile\"."
        classification: String,
        "The designation of this species, such as \"sentient\"."
        designation: String,
        "The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
        eyeColor: [SPECIES_EYE_COLOR!],
        films: [SpeciesfilmsFilm!],
        filmsIds: [ID!],
        "The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
        hairColor: [SPECIES_HAIR_COLOR!],
        id: ID!,
        "indicates if the record is published"
        isPublished: Boolean,
        "The language commonly spoken by this species."
        language: String,
        "The name of this species."
        name: String,
        people: [SpeciespeoplePerson!],
        peopleIds: [ID!],
        "The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
        skinColor: [SPECIES_SKIN_COLOR!]
    ): Species
    updateStarship(
        "The maximum number of kilograms that this starship can transport."
        cargoCapacity: Float,
        "The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\""
        class: String,
        "The maximum length of time that this starship can provide consumables for its entire crew without having to resupply."
        consumables: String,
        " The cost of this starship new, in galactic credits."
        costInCredits: Float,
        "The number of personnel needed to run or pilot this starship."
        crew: Int,
        films: [StarshipfilmsFilm!],
        filmsIds: [ID!],
        "The class of this starships hyperdrive."
        hyperdriveRating: Float,
        id: ID!,
        "indicates if the record is published"
        isPublished: Boolean,
        "The length of this starship in meters."
        length: Float,
        "The manufacturer of this starship."
        manufacturer: [String!],
        " The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight."
        maxAtmospheringSpeed: Int,
        "The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe."
        mglt: Int,
        "The name of this starship. The common name, such as \"Death Star\"."
        name: String,
        " The number of non-essential people this starship can transport."
        passengers: Int,
        pilots: [StarshippilotsPerson!],
        pilotsIds: [ID!]
    ): Starship
    updateVehicle(
        "The maximum number of kilograms that this vehicle can transport."
        cargoCapacity: Int,
        " The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\"."
        class: String,
        "The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply."
        consumables: String,
        "The cost of this vehicle new, in Galactic Credits."
        costInCredits: Int,
        "The number of personnel needed to run or pilot this vehicle."
        crew: Int,
        films: [VehiclefilmsFilm!],
        filmsIds: [ID!],
        id: ID!,
        "indicates if the record is published"
        isPublished: Boolean,
        " The length of this vehicle in meters."
        length: Float,
        "The manufacturer of this vehicle."
        manufacturer: [String!],
        "The maximum speed of this vehicle in the atmosphere."
        maxAtmospheringSpeed: Int,
        "The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\"."
        model: String,
        "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
        name: String,
        "The number of non-essential people this vehicle can transport."
        passengers: Int,
        pilots: [VehiclepilotsPerson!],
        pilotsIds: [ID!]
    ): Vehicle
}

"A Person is an individual person or character within the Star Wars universe"
type Person implements Node {
    "Meta information about the query."
    _filmsMeta(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _speciesMeta(after: String, before: String, filter: SpeciesFilter, first: Int, last: Int, orderBy: SpeciesOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _starshipsMeta(after: String, before: String, filter: StarshipFilter, first: Int, last: Int, orderBy: StarshipOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _vehiclesMeta(after: String, before: String, filter: VehicleFilter, first: Int, last: Int, orderBy: VehicleOrderBy, skip: Int): _QueryMeta!
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    createdAt: DateTime!
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    films(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): [Film!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    homeworld(filter: PlanetFilter): Planet
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String!
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    species(after: String, before: String, filter: SpeciesFilter, first: Int, last: Int, orderBy: SpeciesOrderBy, skip: Int): [Species!]
    starships(after: String, before: String, filter: StarshipFilter, first: Int, last: Int, orderBy: StarshipOrderBy, skip: Int): [Starship!]
    updatedAt: DateTime!
    vehicles(after: String, before: String, filter: VehicleFilter, first: Int, last: Int, orderBy: VehicleOrderBy, skip: Int): [Vehicle!]
}

type PersonPreviousValues {
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    createdAt: DateTime!
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String!
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    updatedAt: DateTime!
}

type PersonSubscriptionPayload {
    mutation: _ModelMutationType!
    node: Person
    previousValues: PersonPreviousValues
    updatedFields: [String!]
}

"A Planet is a large mass, planet or planetoid in the Star Wars Universe, at the time of 0 ABY."
type Planet implements Node {
    "Meta information about the query."
    _filmsMeta(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _residentsMeta(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): _QueryMeta!
    "The climate of this planet."
    climate: [String!]
    createdAt: DateTime!
    "The diameter of this planet in kilometers."
    diameter: Int
    films(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): [Film!]
    "A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs."
    gravity: String
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The name of the planet"
    name: String!
    "The number of standard days it takes for this planet to complete a single orbit of its local star."
    orbitalPeriod: Int
    "The average population of sentient beings inhabiting this planet."
    population: Float
    residents(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): [Person!]
    "The number of standard hours it takes for this planet to complete a single rotation on its axis."
    rotationPeriod: Int
    "The percentage of the planet surface that is naturally occurring water or bodies of water."
    surfaceWater: Float
    "The terrain of this planet."
    terrain: [String!]
    updatedAt: DateTime!
}

type PlanetPreviousValues {
    "The climate of this planet."
    climate: [String!]
    createdAt: DateTime!
    "The diameter of this planet in kilometers."
    diameter: Int
    "A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs."
    gravity: String
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The name of the planet"
    name: String!
    "The number of standard days it takes for this planet to complete a single orbit of its local star."
    orbitalPeriod: Int
    "The average population of sentient beings inhabiting this planet."
    population: Float
    "The number of standard hours it takes for this planet to complete a single rotation on its axis."
    rotationPeriod: Int
    "The percentage of the planet surface that is naturally occurring water or bodies of water."
    surfaceWater: Float
    "The terrain of this planet."
    terrain: [String!]
    updatedAt: DateTime!
}

type PlanetSubscriptionPayload {
    mutation: _ModelMutationType!
    node: Planet
    previousValues: PlanetPreviousValues
    updatedFields: [String!]
}

type Query {
    Asset(id: ID): Asset
    Film(
        id: ID,
        "The title of this film"
        title: String
    ): Film
    Person(
        id: ID,
        "The name of this person."
        name: String
    ): Person
    Planet(
        id: ID,
        "The name of the planet"
        name: String
    ): Planet
    Species(
        id: ID,
        "The name of this species."
        name: String
    ): Species
    Starship(
        id: ID,
        "The name of this starship. The common name, such as \"Death Star\"."
        name: String
    ): Starship
    Vehicle(
        id: ID,
        "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
        name: String
    ): Vehicle
    _allAssetsMeta(after: String, before: String, filter: AssetFilter, first: Int, last: Int, orderBy: AssetOrderBy, skip: Int): _QueryMeta!
    _allFilmsMeta(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): _QueryMeta!
    _allPersonsMeta(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): _QueryMeta!
    _allPlanetsMeta(after: String, before: String, filter: PlanetFilter, first: Int, last: Int, orderBy: PlanetOrderBy, skip: Int): _QueryMeta!
    _allSpeciesMeta(after: String, before: String, filter: SpeciesFilter, first: Int, last: Int, orderBy: SpeciesOrderBy, skip: Int): _QueryMeta!
    _allStarshipsMeta(after: String, before: String, filter: StarshipFilter, first: Int, last: Int, orderBy: StarshipOrderBy, skip: Int): _QueryMeta!
    _allVehiclesMeta(after: String, before: String, filter: VehicleFilter, first: Int, last: Int, orderBy: VehicleOrderBy, skip: Int): _QueryMeta!
    allAssets(after: String, before: String, filter: AssetFilter, first: Int, last: Int, orderBy: AssetOrderBy, skip: Int): [Asset!]!
    allFilms(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): [Film!]!
    allPersons(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): [Person!]!
    allPlanets(after: String, before: String, filter: PlanetFilter, first: Int, last: Int, orderBy: PlanetOrderBy, skip: Int): [Planet!]!
    allSpecies(after: String, before: String, filter: SpeciesFilter, first: Int, last: Int, orderBy: SpeciesOrderBy, skip: Int): [Species!]!
    allStarships(after: String, before: String, filter: StarshipFilter, first: Int, last: Int, orderBy: StarshipOrderBy, skip: Int): [Starship!]!
    allVehicles(after: String, before: String, filter: VehicleFilter, first: Int, last: Int, orderBy: VehicleOrderBy, skip: Int): [Vehicle!]!
    "Fetches an object given its ID"
    node(
        "The ID of an object"
        id: ID!
    ): Node
}

type RemoveFromFilmPlanetsPayload {
    filmsFilm: Film
    planetsPlanet: Planet
}

type RemoveFromFilmSpeciesPayload {
    filmsFilm: Film
    speciesSpecies: Species
}

type RemoveFromFilmStarshipsPayload {
    filmsFilm: Film
    starshipsStarship: Starship
}

type RemoveFromFilmVehiclesPayload {
    filmsFilm: Film
    vehiclesVehicle: Vehicle
}

type RemoveFromPeopleFilmPayload {
    charactersPerson: Person
    filmsFilm: Film
}

type RemoveFromPeoplePlanetPayload {
    homeworldPlanet: Planet
    residentsPerson: Person
}

type RemoveFromPeopleSpeciesPayload {
    peoplePerson: Person
    speciesSpecies: Species
}

type RemoveFromPeopleStarshipsPayload {
    pilotsPerson: Person
    starshipsStarship: Starship
}

type RemoveFromPeopleVehiclesPayload {
    pilotsPerson: Person
    vehiclesVehicle: Vehicle
}

"A Species is a type of person or character within the Star Wars Universe."
type Species implements Node {
    "Meta information about the query."
    _filmsMeta(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _peopleMeta(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): _QueryMeta!
    "The average height of this species in centimeters."
    averageHeight: Int
    "The average lifespan of this species in years."
    averageLifespan: Int
    "The classification of this species, such as \"mammal\" or \"reptile\"."
    classification: String
    createdAt: DateTime!
    "The designation of this species, such as \"sentient\"."
    designation: String
    "The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
    eyeColor: [SPECIES_EYE_COLOR!]
    films(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): [Film!]
    "The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
    hairColor: [SPECIES_HAIR_COLOR!]
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The language commonly spoken by this species."
    language: String
    "The name of this species."
    name: String!
    people(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): [Person!]
    "The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
    skinColor: [SPECIES_SKIN_COLOR!]
    updatedAt: DateTime!
}

type SpeciesPreviousValues {
    "The average height of this species in centimeters."
    averageHeight: Int
    "The average lifespan of this species in years."
    averageLifespan: Int
    "The classification of this species, such as \"mammal\" or \"reptile\"."
    classification: String
    createdAt: DateTime!
    "The designation of this species, such as \"sentient\"."
    designation: String
    "The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
    eyeColor: [SPECIES_EYE_COLOR!]
    "The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
    hairColor: [SPECIES_HAIR_COLOR!]
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The language commonly spoken by this species."
    language: String
    "The name of this species."
    name: String!
    "The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
    skinColor: [SPECIES_SKIN_COLOR!]
    updatedAt: DateTime!
}

type SpeciesSubscriptionPayload {
    mutation: _ModelMutationType!
    node: Species
    previousValues: SpeciesPreviousValues
    updatedFields: [String!]
}

"A Starship is a single transport craft that has hyperdrive capability."
type Starship implements Node {
    "Meta information about the query."
    _filmsMeta(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _pilotsMeta(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): _QueryMeta!
    "The maximum number of kilograms that this starship can transport."
    cargoCapacity: Float
    "The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\""
    class: String
    "The maximum length of time that this starship can provide consumables for its entire crew without having to resupply."
    consumables: String
    " The cost of this starship new, in galactic credits."
    costInCredits: Float
    createdAt: DateTime!
    "The number of personnel needed to run or pilot this starship."
    crew: Int
    films(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): [Film!]
    "The class of this starships hyperdrive."
    hyperdriveRating: Float
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The length of this starship in meters."
    length: Float
    "The manufacturer of this starship."
    manufacturer: [String!]
    " The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight."
    maxAtmospheringSpeed: Int
    "The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe."
    mglt: Int
    "The name of this starship. The common name, such as \"Death Star\"."
    name: String!
    " The number of non-essential people this starship can transport."
    passengers: Int
    pilots(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): [Person!]
    updatedAt: DateTime!
}

type StarshipPreviousValues {
    "The maximum number of kilograms that this starship can transport."
    cargoCapacity: Float
    "The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\""
    class: String
    "The maximum length of time that this starship can provide consumables for its entire crew without having to resupply."
    consumables: String
    " The cost of this starship new, in galactic credits."
    costInCredits: Float
    createdAt: DateTime!
    "The number of personnel needed to run or pilot this starship."
    crew: Int
    "The class of this starships hyperdrive."
    hyperdriveRating: Float
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    "The length of this starship in meters."
    length: Float
    "The manufacturer of this starship."
    manufacturer: [String!]
    " The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight."
    maxAtmospheringSpeed: Int
    "The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe."
    mglt: Int
    "The name of this starship. The common name, such as \"Death Star\"."
    name: String!
    " The number of non-essential people this starship can transport."
    passengers: Int
    updatedAt: DateTime!
}

type StarshipSubscriptionPayload {
    mutation: _ModelMutationType!
    node: Starship
    previousValues: StarshipPreviousValues
    updatedFields: [String!]
}

type Subscription {
    Asset(filter: AssetSubscriptionFilter): AssetSubscriptionPayload
    Film(filter: FilmSubscriptionFilter): FilmSubscriptionPayload
    Person(filter: PersonSubscriptionFilter): PersonSubscriptionPayload
    Planet(filter: PlanetSubscriptionFilter): PlanetSubscriptionPayload
    Species(filter: SpeciesSubscriptionFilter): SpeciesSubscriptionPayload
    Starship(filter: StarshipSubscriptionFilter): StarshipSubscriptionPayload
    Vehicle(filter: VehicleSubscriptionFilter): VehicleSubscriptionPayload
}

"A Vehicle is a single transport craft that does not have hyperdrive capability."
type Vehicle implements Node {
    "Meta information about the query."
    _filmsMeta(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): _QueryMeta!
    "Meta information about the query."
    _pilotsMeta(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): _QueryMeta!
    "The maximum number of kilograms that this vehicle can transport."
    cargoCapacity: Int
    " The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\"."
    class: String
    "The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply."
    consumables: String
    "The cost of this vehicle new, in Galactic Credits."
    costInCredits: Int
    createdAt: DateTime!
    "The number of personnel needed to run or pilot this vehicle."
    crew: Int
    films(after: String, before: String, filter: FilmFilter, first: Int, last: Int, orderBy: FilmOrderBy, skip: Int): [Film!]
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    " The length of this vehicle in meters."
    length: Float
    "The manufacturer of this vehicle."
    manufacturer: [String!]
    "The maximum speed of this vehicle in the atmosphere."
    maxAtmospheringSpeed: Int
    "The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\"."
    model: String
    "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
    name: String!
    "The number of non-essential people this vehicle can transport."
    passengers: Int
    pilots(after: String, before: String, filter: PersonFilter, first: Int, last: Int, orderBy: PersonOrderBy, skip: Int): [Person!]
    updatedAt: DateTime!
}

type VehiclePreviousValues {
    "The maximum number of kilograms that this vehicle can transport."
    cargoCapacity: Int
    " The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\"."
    class: String
    "The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply."
    consumables: String
    "The cost of this vehicle new, in Galactic Credits."
    costInCredits: Int
    createdAt: DateTime!
    "The number of personnel needed to run or pilot this vehicle."
    crew: Int
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean!
    " The length of this vehicle in meters."
    length: Float
    "The manufacturer of this vehicle."
    manufacturer: [String!]
    "The maximum speed of this vehicle in the atmosphere."
    maxAtmospheringSpeed: Int
    "The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\"."
    model: String
    "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
    name: String!
    "The number of non-essential people this vehicle can transport."
    passengers: Int
    updatedAt: DateTime!
}

type VehicleSubscriptionPayload {
    mutation: _ModelMutationType!
    node: Vehicle
    previousValues: VehiclePreviousValues
    updatedFields: [String!]
}

"Meta information about the query."
type _QueryMeta {
    count: Int!
}

enum AssetOrderBy {
    createdAt_ASC
    createdAt_DESC
    fileName_ASC
    fileName_DESC
    handle_ASC
    handle_DESC
    height_ASC
    height_DESC
    id_ASC
    id_DESC
    mimeType_ASC
    mimeType_DESC
    size_ASC
    size_DESC
    updatedAt_ASC
    updatedAt_DESC
    url_ASC
    url_DESC
    width_ASC
    width_DESC
}

enum FilmOrderBy {
    createdAt_ASC
    createdAt_DESC
    director_ASC
    director_DESC
    episodeId_ASC
    episodeId_DESC
    id_ASC
    id_DESC
    isPublished_ASC
    isPublished_DESC
    openingCrawl_ASC
    openingCrawl_DESC
    releaseDate_ASC
    releaseDate_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
enum PERSON_EYE_COLOR {
    BLACK
    BLUE
    BLUEGREY
    BROWN
    DARK
    GOLD
    GREEN
    HAZEL
    ORANGE
    PINK
    RED
    UNKNOWN
    WHITE
    YELLOW
}

" The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
enum PERSON_GENDER {
    FEMALE
    HERMAPHRODITE
    MALE
    UNKNOWN
}

"The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
enum PERSON_HAIR_COLOR {
    AUBURN
    BLACK
    BLONDE
    BROWN
    GREY
    UNKNOWN
    WHITE
}

"The skin color of this person."
enum PERSON_SKIN_COLOR {
    BLUE
    BROWN
    BROWNMOTTLE
    DARK
    FAIR
    GOLD
    GREEN
    GREENTAN
    GREY
    LIGHT
    METAL
    MOTTLEDGREEN
    ORANGE
    PALE
    RED
    SILVER
    TAN
    UNKNOWN
    WHITE
    YELLOW
}

enum PersonOrderBy {
    birthYear_ASC
    birthYear_DESC
    createdAt_ASC
    createdAt_DESC
    gender_ASC
    gender_DESC
    height_ASC
    height_DESC
    id_ASC
    id_DESC
    isPublished_ASC
    isPublished_DESC
    mass_ASC
    mass_DESC
    name_ASC
    name_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum PlanetOrderBy {
    createdAt_ASC
    createdAt_DESC
    diameter_ASC
    diameter_DESC
    gravity_ASC
    gravity_DESC
    id_ASC
    id_DESC
    isPublished_ASC
    isPublished_DESC
    name_ASC
    name_DESC
    orbitalPeriod_ASC
    orbitalPeriod_DESC
    population_ASC
    population_DESC
    rotationPeriod_ASC
    rotationPeriod_DESC
    surfaceWater_ASC
    surfaceWater_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
enum SPECIES_EYE_COLOR {
    AMBER
    BLACK
    BLUE
    BROWN
    GOLD
    GOLDEN
    GREEN
    GREY
    HAZEL
    INDIGO
    ORANGE
    PINK
    RED
    SILVER
    UNKNOWN
    YELLOW
}

"The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
enum SPECIES_HAIR_COLOR {
    BLACK
    BLONDE
    BROWN
    RED
    UNKNOWN
    WHITE
}

"The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
enum SPECIES_SKIN_COLOR {
    ASIAN
    BLACK
    BLUE
    BROWN
    CAUCASIAN
    DARK
    GREEN
    GREY
    HISPANIC
    MAGENTA
    ORANGE
    PALE
    PALEPINK
    PEACH
    PINK
    PURPLE
    RED
    TAN
    UNKNOWN
    WHITE
    YELLOW
}

enum SpeciesOrderBy {
    averageHeight_ASC
    averageHeight_DESC
    averageLifespan_ASC
    averageLifespan_DESC
    classification_ASC
    classification_DESC
    createdAt_ASC
    createdAt_DESC
    designation_ASC
    designation_DESC
    id_ASC
    id_DESC
    isPublished_ASC
    isPublished_DESC
    language_ASC
    language_DESC
    name_ASC
    name_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum StarshipOrderBy {
    cargoCapacity_ASC
    cargoCapacity_DESC
    class_ASC
    class_DESC
    consumables_ASC
    consumables_DESC
    costInCredits_ASC
    costInCredits_DESC
    createdAt_ASC
    createdAt_DESC
    crew_ASC
    crew_DESC
    hyperdriveRating_ASC
    hyperdriveRating_DESC
    id_ASC
    id_DESC
    isPublished_ASC
    isPublished_DESC
    length_ASC
    length_DESC
    maxAtmospheringSpeed_ASC
    maxAtmospheringSpeed_DESC
    mglt_ASC
    mglt_DESC
    name_ASC
    name_DESC
    passengers_ASC
    passengers_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum VehicleOrderBy {
    cargoCapacity_ASC
    cargoCapacity_DESC
    class_ASC
    class_DESC
    consumables_ASC
    consumables_DESC
    costInCredits_ASC
    costInCredits_DESC
    createdAt_ASC
    createdAt_DESC
    crew_ASC
    crew_DESC
    id_ASC
    id_DESC
    isPublished_ASC
    isPublished_DESC
    length_ASC
    length_DESC
    maxAtmospheringSpeed_ASC
    maxAtmospheringSpeed_DESC
    model_ASC
    model_DESC
    name_ASC
    name_DESC
    passengers_ASC
    passengers_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum _ModelMutationType {
    CREATED
    DELETED
    UPDATED
}

input AssetFilter {
    "Logical AND on all given filters."
    AND: [AssetFilter!]
    "Logical OR on all given filters."
    OR: [AssetFilter!]
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    fileName: String
    "All values containing the given string."
    fileName_contains: String
    "All values ending with the given string."
    fileName_ends_with: String
    "All values greater than the given value."
    fileName_gt: String
    "All values greater than or equal the given value."
    fileName_gte: String
    "All values that are contained in given list."
    fileName_in: [String!]
    "All values less than the given value."
    fileName_lt: String
    "All values less than or equal the given value."
    fileName_lte: String
    "All values that are not equal to given value."
    fileName_not: String
    "All values not containing the given string."
    fileName_not_contains: String
    "All values not ending with the given string."
    fileName_not_ends_with: String
    "All values that are not contained in given list."
    fileName_not_in: [String!]
    "All values not starting with the given string."
    fileName_not_starts_with: String
    "All values starting with the given string."
    fileName_starts_with: String
    handle: String
    "All values containing the given string."
    handle_contains: String
    "All values ending with the given string."
    handle_ends_with: String
    "All values greater than the given value."
    handle_gt: String
    "All values greater than or equal the given value."
    handle_gte: String
    "All values that are contained in given list."
    handle_in: [String!]
    "All values less than the given value."
    handle_lt: String
    "All values less than or equal the given value."
    handle_lte: String
    "All values that are not equal to given value."
    handle_not: String
    "All values not containing the given string."
    handle_not_contains: String
    "All values not ending with the given string."
    handle_not_ends_with: String
    "All values that are not contained in given list."
    handle_not_in: [String!]
    "All values not starting with the given string."
    handle_not_starts_with: String
    "All values starting with the given string."
    handle_starts_with: String
    height: Float
    "All values greater than the given value."
    height_gt: Float
    "All values greater than or equal the given value."
    height_gte: Float
    "All values that are contained in given list."
    height_in: [Float!]
    "All values less than the given value."
    height_lt: Float
    "All values less than or equal the given value."
    height_lte: Float
    "All values that are not equal to given value."
    height_not: Float
    "All values that are not contained in given list."
    height_not_in: [Float!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    mimeType: String
    "All values containing the given string."
    mimeType_contains: String
    "All values ending with the given string."
    mimeType_ends_with: String
    "All values greater than the given value."
    mimeType_gt: String
    "All values greater than or equal the given value."
    mimeType_gte: String
    "All values that are contained in given list."
    mimeType_in: [String!]
    "All values less than the given value."
    mimeType_lt: String
    "All values less than or equal the given value."
    mimeType_lte: String
    "All values that are not equal to given value."
    mimeType_not: String
    "All values not containing the given string."
    mimeType_not_contains: String
    "All values not ending with the given string."
    mimeType_not_ends_with: String
    "All values that are not contained in given list."
    mimeType_not_in: [String!]
    "All values not starting with the given string."
    mimeType_not_starts_with: String
    "All values starting with the given string."
    mimeType_starts_with: String
    size: Float
    "All values greater than the given value."
    size_gt: Float
    "All values greater than or equal the given value."
    size_gte: Float
    "All values that are contained in given list."
    size_in: [Float!]
    "All values less than the given value."
    size_lt: Float
    "All values less than or equal the given value."
    size_lte: Float
    "All values that are not equal to given value."
    size_not: Float
    "All values that are not contained in given list."
    size_not_in: [Float!]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
    url: String
    "All values containing the given string."
    url_contains: String
    "All values ending with the given string."
    url_ends_with: String
    "All values greater than the given value."
    url_gt: String
    "All values greater than or equal the given value."
    url_gte: String
    "All values that are contained in given list."
    url_in: [String!]
    "All values less than the given value."
    url_lt: String
    "All values less than or equal the given value."
    url_lte: String
    "All values that are not equal to given value."
    url_not: String
    "All values not containing the given string."
    url_not_contains: String
    "All values not ending with the given string."
    url_not_ends_with: String
    "All values that are not contained in given list."
    url_not_in: [String!]
    "All values not starting with the given string."
    url_not_starts_with: String
    "All values starting with the given string."
    url_starts_with: String
    width: Float
    "All values greater than the given value."
    width_gt: Float
    "All values greater than or equal the given value."
    width_gte: Float
    "All values that are contained in given list."
    width_in: [Float!]
    "All values less than the given value."
    width_lt: Float
    "All values less than or equal the given value."
    width_lte: Float
    "All values that are not equal to given value."
    width_not: Float
    "All values that are not contained in given list."
    width_not_in: [Float!]
}

input AssetSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [AssetSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [AssetSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: AssetSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input AssetSubscriptionFilterNode {
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    fileName: String
    "All values containing the given string."
    fileName_contains: String
    "All values ending with the given string."
    fileName_ends_with: String
    "All values greater than the given value."
    fileName_gt: String
    "All values greater than or equal the given value."
    fileName_gte: String
    "All values that are contained in given list."
    fileName_in: [String!]
    "All values less than the given value."
    fileName_lt: String
    "All values less than or equal the given value."
    fileName_lte: String
    "All values that are not equal to given value."
    fileName_not: String
    "All values not containing the given string."
    fileName_not_contains: String
    "All values not ending with the given string."
    fileName_not_ends_with: String
    "All values that are not contained in given list."
    fileName_not_in: [String!]
    "All values not starting with the given string."
    fileName_not_starts_with: String
    "All values starting with the given string."
    fileName_starts_with: String
    handle: String
    "All values containing the given string."
    handle_contains: String
    "All values ending with the given string."
    handle_ends_with: String
    "All values greater than the given value."
    handle_gt: String
    "All values greater than or equal the given value."
    handle_gte: String
    "All values that are contained in given list."
    handle_in: [String!]
    "All values less than the given value."
    handle_lt: String
    "All values less than or equal the given value."
    handle_lte: String
    "All values that are not equal to given value."
    handle_not: String
    "All values not containing the given string."
    handle_not_contains: String
    "All values not ending with the given string."
    handle_not_ends_with: String
    "All values that are not contained in given list."
    handle_not_in: [String!]
    "All values not starting with the given string."
    handle_not_starts_with: String
    "All values starting with the given string."
    handle_starts_with: String
    height: Float
    "All values greater than the given value."
    height_gt: Float
    "All values greater than or equal the given value."
    height_gte: Float
    "All values that are contained in given list."
    height_in: [Float!]
    "All values less than the given value."
    height_lt: Float
    "All values less than or equal the given value."
    height_lte: Float
    "All values that are not equal to given value."
    height_not: Float
    "All values that are not contained in given list."
    height_not_in: [Float!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    mimeType: String
    "All values containing the given string."
    mimeType_contains: String
    "All values ending with the given string."
    mimeType_ends_with: String
    "All values greater than the given value."
    mimeType_gt: String
    "All values greater than or equal the given value."
    mimeType_gte: String
    "All values that are contained in given list."
    mimeType_in: [String!]
    "All values less than the given value."
    mimeType_lt: String
    "All values less than or equal the given value."
    mimeType_lte: String
    "All values that are not equal to given value."
    mimeType_not: String
    "All values not containing the given string."
    mimeType_not_contains: String
    "All values not ending with the given string."
    mimeType_not_ends_with: String
    "All values that are not contained in given list."
    mimeType_not_in: [String!]
    "All values not starting with the given string."
    mimeType_not_starts_with: String
    "All values starting with the given string."
    mimeType_starts_with: String
    size: Float
    "All values greater than the given value."
    size_gt: Float
    "All values greater than or equal the given value."
    size_gte: Float
    "All values that are contained in given list."
    size_in: [Float!]
    "All values less than the given value."
    size_lt: Float
    "All values less than or equal the given value."
    size_lte: Float
    "All values that are not equal to given value."
    size_not: Float
    "All values that are not contained in given list."
    size_not_in: [Float!]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
    url: String
    "All values containing the given string."
    url_contains: String
    "All values ending with the given string."
    url_ends_with: String
    "All values greater than the given value."
    url_gt: String
    "All values greater than or equal the given value."
    url_gte: String
    "All values that are contained in given list."
    url_in: [String!]
    "All values less than the given value."
    url_lt: String
    "All values less than or equal the given value."
    url_lte: String
    "All values that are not equal to given value."
    url_not: String
    "All values not containing the given string."
    url_not_contains: String
    "All values not ending with the given string."
    url_not_ends_with: String
    "All values that are not contained in given list."
    url_not_in: [String!]
    "All values not starting with the given string."
    url_not_starts_with: String
    "All values starting with the given string."
    url_starts_with: String
    width: Float
    "All values greater than the given value."
    width_gt: Float
    "All values greater than or equal the given value."
    width_gte: Float
    "All values that are contained in given list."
    width_in: [Float!]
    "All values less than the given value."
    width_lt: Float
    "All values less than or equal the given value."
    width_lte: Float
    "All values that are not equal to given value."
    width_not: Float
    "All values that are not contained in given list."
    width_not_in: [Float!]
}

input CreateAsset {
    "Original File Name"
    fileName: String!
    "The File Handle"
    handle: String!
    "The height of the file in case it is an image"
    height: Float
    "The Mime Type"
    mimeType: String
    "The Size Of The File"
    size: Float!
    "The Url Of The Asset"
    url: String!
    "The width of the file in case it is an image"
    width: Float
}

input CreateFilm {
    characters: [FilmcharactersPerson!]
    charactersIds: [ID!]
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int!
    "indicates if the record is published"
    isPublished: Boolean
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    planets: [FilmplanetsPlanet!]
    planetsIds: [ID!]
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    species: [FilmspeciesSpecies!]
    speciesIds: [ID!]
    starships: [FilmstarshipsStarship!]
    starshipsIds: [ID!]
    "The title of this film"
    title: String!
    vehicles: [FilmvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input CreatePerson {
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    films: [PersonfilmsFilm!]
    filmsIds: [ID!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    homeworld: PersonhomeworldPlanet
    homeworldId: ID
    "indicates if the record is published"
    isPublished: Boolean
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String!
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    species: [PersonspeciesSpecies!]
    speciesIds: [ID!]
    starships: [PersonstarshipsStarship!]
    starshipsIds: [ID!]
    vehicles: [PersonvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input CreatePlanet {
    "The climate of this planet."
    climate: [String!]
    "The diameter of this planet in kilometers."
    diameter: Int
    films: [PlanetfilmsFilm!]
    filmsIds: [ID!]
    "A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs."
    gravity: String
    "indicates if the record is published"
    isPublished: Boolean
    "The name of the planet"
    name: String!
    "The number of standard days it takes for this planet to complete a single orbit of its local star."
    orbitalPeriod: Int
    "The average population of sentient beings inhabiting this planet."
    population: Float
    residents: [PlanetresidentsPerson!]
    residentsIds: [ID!]
    "The number of standard hours it takes for this planet to complete a single rotation on its axis."
    rotationPeriod: Int
    "The percentage of the planet surface that is naturally occurring water or bodies of water."
    surfaceWater: Float
    "The terrain of this planet."
    terrain: [String!]
}

input CreateSpecies {
    "The average height of this species in centimeters."
    averageHeight: Int
    "The average lifespan of this species in years."
    averageLifespan: Int
    "The classification of this species, such as \"mammal\" or \"reptile\"."
    classification: String
    "The designation of this species, such as \"sentient\"."
    designation: String
    "The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
    eyeColor: [SPECIES_EYE_COLOR!]
    films: [SpeciesfilmsFilm!]
    filmsIds: [ID!]
    "The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
    hairColor: [SPECIES_HAIR_COLOR!]
    "indicates if the record is published"
    isPublished: Boolean
    "The language commonly spoken by this species."
    language: String
    "The name of this species."
    name: String!
    people: [SpeciespeoplePerson!]
    peopleIds: [ID!]
    "The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
    skinColor: [SPECIES_SKIN_COLOR!]
}

input CreateStarship {
    "The maximum number of kilograms that this starship can transport."
    cargoCapacity: Float
    "The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\""
    class: String
    "The maximum length of time that this starship can provide consumables for its entire crew without having to resupply."
    consumables: String
    " The cost of this starship new, in galactic credits."
    costInCredits: Float
    "The number of personnel needed to run or pilot this starship."
    crew: Int
    films: [StarshipfilmsFilm!]
    filmsIds: [ID!]
    "The class of this starships hyperdrive."
    hyperdriveRating: Float
    "indicates if the record is published"
    isPublished: Boolean
    "The length of this starship in meters."
    length: Float
    "The manufacturer of this starship."
    manufacturer: [String!]
    " The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight."
    maxAtmospheringSpeed: Int
    "The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe."
    mglt: Int
    "The name of this starship. The common name, such as \"Death Star\"."
    name: String!
    " The number of non-essential people this starship can transport."
    passengers: Int
    pilots: [StarshippilotsPerson!]
    pilotsIds: [ID!]
}

input CreateVehicle {
    "The maximum number of kilograms that this vehicle can transport."
    cargoCapacity: Int
    " The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\"."
    class: String
    "The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply."
    consumables: String
    "The cost of this vehicle new, in Galactic Credits."
    costInCredits: Int
    "The number of personnel needed to run or pilot this vehicle."
    crew: Int
    films: [VehiclefilmsFilm!]
    filmsIds: [ID!]
    "indicates if the record is published"
    isPublished: Boolean
    " The length of this vehicle in meters."
    length: Float
    "The manufacturer of this vehicle."
    manufacturer: [String!]
    "The maximum speed of this vehicle in the atmosphere."
    maxAtmospheringSpeed: Int
    "The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\"."
    model: String
    "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
    name: String!
    "The number of non-essential people this vehicle can transport."
    passengers: Int
    pilots: [VehiclepilotsPerson!]
    pilotsIds: [ID!]
}

input FilmFilter {
    "Logical AND on all given filters."
    AND: [FilmFilter!]
    "Logical OR on all given filters."
    OR: [FilmFilter!]
    characters_every: PersonFilter
    characters_none: PersonFilter
    characters_some: PersonFilter
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    director: String
    "All values containing the given string."
    director_contains: String
    "All values ending with the given string."
    director_ends_with: String
    "All values greater than the given value."
    director_gt: String
    "All values greater than or equal the given value."
    director_gte: String
    "All values that are contained in given list."
    director_in: [String!]
    "All values less than the given value."
    director_lt: String
    "All values less than or equal the given value."
    director_lte: String
    "All values that are not equal to given value."
    director_not: String
    "All values not containing the given string."
    director_not_contains: String
    "All values not ending with the given string."
    director_not_ends_with: String
    "All values that are not contained in given list."
    director_not_in: [String!]
    "All values not starting with the given string."
    director_not_starts_with: String
    "All values starting with the given string."
    director_starts_with: String
    episodeId: Int
    "All values greater than the given value."
    episodeId_gt: Int
    "All values greater than or equal the given value."
    episodeId_gte: Int
    "All values that are contained in given list."
    episodeId_in: [Int!]
    "All values less than the given value."
    episodeId_lt: Int
    "All values less than or equal the given value."
    episodeId_lte: Int
    "All values that are not equal to given value."
    episodeId_not: Int
    "All values that are not contained in given list."
    episodeId_not_in: [Int!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    openingCrawl: String
    "All values containing the given string."
    openingCrawl_contains: String
    "All values ending with the given string."
    openingCrawl_ends_with: String
    "All values greater than the given value."
    openingCrawl_gt: String
    "All values greater than or equal the given value."
    openingCrawl_gte: String
    "All values that are contained in given list."
    openingCrawl_in: [String!]
    "All values less than the given value."
    openingCrawl_lt: String
    "All values less than or equal the given value."
    openingCrawl_lte: String
    "All values that are not equal to given value."
    openingCrawl_not: String
    "All values not containing the given string."
    openingCrawl_not_contains: String
    "All values not ending with the given string."
    openingCrawl_not_ends_with: String
    "All values that are not contained in given list."
    openingCrawl_not_in: [String!]
    "All values not starting with the given string."
    openingCrawl_not_starts_with: String
    "All values starting with the given string."
    openingCrawl_starts_with: String
    planets_every: PlanetFilter
    planets_none: PlanetFilter
    planets_some: PlanetFilter
    releaseDate: DateTime
    "All values greater than the given value."
    releaseDate_gt: DateTime
    "All values greater than or equal the given value."
    releaseDate_gte: DateTime
    "All values that are contained in given list."
    releaseDate_in: [DateTime!]
    "All values less than the given value."
    releaseDate_lt: DateTime
    "All values less than or equal the given value."
    releaseDate_lte: DateTime
    "All values that are not equal to given value."
    releaseDate_not: DateTime
    "All values that are not contained in given list."
    releaseDate_not_in: [DateTime!]
    species_every: SpeciesFilter
    species_none: SpeciesFilter
    species_some: SpeciesFilter
    starships_every: StarshipFilter
    starships_none: StarshipFilter
    starships_some: StarshipFilter
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values greater than the given value."
    title_gt: String
    "All values greater than or equal the given value."
    title_gte: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values less than the given value."
    title_lt: String
    "All values less than or equal the given value."
    title_lte: String
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string."
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
    vehicles_every: VehicleFilter
    vehicles_none: VehicleFilter
    vehicles_some: VehicleFilter
}

input FilmSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [FilmSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [FilmSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: FilmSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input FilmSubscriptionFilterNode {
    characters_every: PersonFilter
    characters_none: PersonFilter
    characters_some: PersonFilter
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    director: String
    "All values containing the given string."
    director_contains: String
    "All values ending with the given string."
    director_ends_with: String
    "All values greater than the given value."
    director_gt: String
    "All values greater than or equal the given value."
    director_gte: String
    "All values that are contained in given list."
    director_in: [String!]
    "All values less than the given value."
    director_lt: String
    "All values less than or equal the given value."
    director_lte: String
    "All values that are not equal to given value."
    director_not: String
    "All values not containing the given string."
    director_not_contains: String
    "All values not ending with the given string."
    director_not_ends_with: String
    "All values that are not contained in given list."
    director_not_in: [String!]
    "All values not starting with the given string."
    director_not_starts_with: String
    "All values starting with the given string."
    director_starts_with: String
    episodeId: Int
    "All values greater than the given value."
    episodeId_gt: Int
    "All values greater than or equal the given value."
    episodeId_gte: Int
    "All values that are contained in given list."
    episodeId_in: [Int!]
    "All values less than the given value."
    episodeId_lt: Int
    "All values less than or equal the given value."
    episodeId_lte: Int
    "All values that are not equal to given value."
    episodeId_not: Int
    "All values that are not contained in given list."
    episodeId_not_in: [Int!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    openingCrawl: String
    "All values containing the given string."
    openingCrawl_contains: String
    "All values ending with the given string."
    openingCrawl_ends_with: String
    "All values greater than the given value."
    openingCrawl_gt: String
    "All values greater than or equal the given value."
    openingCrawl_gte: String
    "All values that are contained in given list."
    openingCrawl_in: [String!]
    "All values less than the given value."
    openingCrawl_lt: String
    "All values less than or equal the given value."
    openingCrawl_lte: String
    "All values that are not equal to given value."
    openingCrawl_not: String
    "All values not containing the given string."
    openingCrawl_not_contains: String
    "All values not ending with the given string."
    openingCrawl_not_ends_with: String
    "All values that are not contained in given list."
    openingCrawl_not_in: [String!]
    "All values not starting with the given string."
    openingCrawl_not_starts_with: String
    "All values starting with the given string."
    openingCrawl_starts_with: String
    planets_every: PlanetFilter
    planets_none: PlanetFilter
    planets_some: PlanetFilter
    releaseDate: DateTime
    "All values greater than the given value."
    releaseDate_gt: DateTime
    "All values greater than or equal the given value."
    releaseDate_gte: DateTime
    "All values that are contained in given list."
    releaseDate_in: [DateTime!]
    "All values less than the given value."
    releaseDate_lt: DateTime
    "All values less than or equal the given value."
    releaseDate_lte: DateTime
    "All values that are not equal to given value."
    releaseDate_not: DateTime
    "All values that are not contained in given list."
    releaseDate_not_in: [DateTime!]
    species_every: SpeciesFilter
    species_none: SpeciesFilter
    species_some: SpeciesFilter
    starships_every: StarshipFilter
    starships_none: StarshipFilter
    starships_some: StarshipFilter
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values greater than the given value."
    title_gt: String
    "All values greater than or equal the given value."
    title_gte: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values less than the given value."
    title_lt: String
    "All values less than or equal the given value."
    title_lte: String
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string."
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
    vehicles_every: VehicleFilter
    vehicles_none: VehicleFilter
    vehicles_some: VehicleFilter
}

input FilmcharactersPerson {
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    films: [PersonfilmsFilm!]
    filmsIds: [ID!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    homeworld: PersonhomeworldPlanet
    homeworldId: ID
    "indicates if the record is published"
    isPublished: Boolean
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String!
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    species: [PersonspeciesSpecies!]
    speciesIds: [ID!]
    starships: [PersonstarshipsStarship!]
    starshipsIds: [ID!]
    vehicles: [PersonvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input FilmplanetsPlanet {
    "The climate of this planet."
    climate: [String!]
    "The diameter of this planet in kilometers."
    diameter: Int
    films: [PlanetfilmsFilm!]
    filmsIds: [ID!]
    "A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs."
    gravity: String
    "indicates if the record is published"
    isPublished: Boolean
    "The name of the planet"
    name: String!
    "The number of standard days it takes for this planet to complete a single orbit of its local star."
    orbitalPeriod: Int
    "The average population of sentient beings inhabiting this planet."
    population: Float
    residents: [PlanetresidentsPerson!]
    residentsIds: [ID!]
    "The number of standard hours it takes for this planet to complete a single rotation on its axis."
    rotationPeriod: Int
    "The percentage of the planet surface that is naturally occurring water or bodies of water."
    surfaceWater: Float
    "The terrain of this planet."
    terrain: [String!]
}

input FilmspeciesSpecies {
    "The average height of this species in centimeters."
    averageHeight: Int
    "The average lifespan of this species in years."
    averageLifespan: Int
    "The classification of this species, such as \"mammal\" or \"reptile\"."
    classification: String
    "The designation of this species, such as \"sentient\"."
    designation: String
    "The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
    eyeColor: [SPECIES_EYE_COLOR!]
    films: [SpeciesfilmsFilm!]
    filmsIds: [ID!]
    "The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
    hairColor: [SPECIES_HAIR_COLOR!]
    "indicates if the record is published"
    isPublished: Boolean
    "The language commonly spoken by this species."
    language: String
    "The name of this species."
    name: String!
    people: [SpeciespeoplePerson!]
    peopleIds: [ID!]
    "The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
    skinColor: [SPECIES_SKIN_COLOR!]
}

input FilmstarshipsStarship {
    "The maximum number of kilograms that this starship can transport."
    cargoCapacity: Float
    "The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\""
    class: String
    "The maximum length of time that this starship can provide consumables for its entire crew without having to resupply."
    consumables: String
    " The cost of this starship new, in galactic credits."
    costInCredits: Float
    "The number of personnel needed to run or pilot this starship."
    crew: Int
    films: [StarshipfilmsFilm!]
    filmsIds: [ID!]
    "The class of this starships hyperdrive."
    hyperdriveRating: Float
    "indicates if the record is published"
    isPublished: Boolean
    "The length of this starship in meters."
    length: Float
    "The manufacturer of this starship."
    manufacturer: [String!]
    " The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight."
    maxAtmospheringSpeed: Int
    "The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe."
    mglt: Int
    "The name of this starship. The common name, such as \"Death Star\"."
    name: String!
    " The number of non-essential people this starship can transport."
    passengers: Int
    pilots: [StarshippilotsPerson!]
    pilotsIds: [ID!]
}

input FilmvehiclesVehicle {
    "The maximum number of kilograms that this vehicle can transport."
    cargoCapacity: Int
    " The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\"."
    class: String
    "The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply."
    consumables: String
    "The cost of this vehicle new, in Galactic Credits."
    costInCredits: Int
    "The number of personnel needed to run or pilot this vehicle."
    crew: Int
    films: [VehiclefilmsFilm!]
    filmsIds: [ID!]
    "indicates if the record is published"
    isPublished: Boolean
    " The length of this vehicle in meters."
    length: Float
    "The manufacturer of this vehicle."
    manufacturer: [String!]
    "The maximum speed of this vehicle in the atmosphere."
    maxAtmospheringSpeed: Int
    "The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\"."
    model: String
    "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
    name: String!
    "The number of non-essential people this vehicle can transport."
    passengers: Int
    pilots: [VehiclepilotsPerson!]
    pilotsIds: [ID!]
}

input InvokeFunctionInput {
    clientMutationId: String
    input: String!
    name: String!
}

input PersonFilter {
    "Logical AND on all given filters."
    AND: [PersonFilter!]
    "Logical OR on all given filters."
    OR: [PersonFilter!]
    birthYear: String
    "All values containing the given string."
    birthYear_contains: String
    "All values ending with the given string."
    birthYear_ends_with: String
    "All values greater than the given value."
    birthYear_gt: String
    "All values greater than or equal the given value."
    birthYear_gte: String
    "All values that are contained in given list."
    birthYear_in: [String!]
    "All values less than the given value."
    birthYear_lt: String
    "All values less than or equal the given value."
    birthYear_lte: String
    "All values that are not equal to given value."
    birthYear_not: String
    "All values not containing the given string."
    birthYear_not_contains: String
    "All values not ending with the given string."
    birthYear_not_ends_with: String
    "All values that are not contained in given list."
    birthYear_not_in: [String!]
    "All values not starting with the given string."
    birthYear_not_starts_with: String
    "All values starting with the given string."
    birthYear_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    gender: PERSON_GENDER
    "All values that are contained in given list."
    gender_in: [PERSON_GENDER!]
    "All values that are not equal to given value."
    gender_not: PERSON_GENDER
    "All values that are not contained in given list."
    gender_not_in: [PERSON_GENDER!]
    height: Int
    "All values greater than the given value."
    height_gt: Int
    "All values greater than or equal the given value."
    height_gte: Int
    "All values that are contained in given list."
    height_in: [Int!]
    "All values less than the given value."
    height_lt: Int
    "All values less than or equal the given value."
    height_lte: Int
    "All values that are not equal to given value."
    height_not: Int
    "All values that are not contained in given list."
    height_not_in: [Int!]
    homeworld: PlanetFilter
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    mass: Float
    "All values greater than the given value."
    mass_gt: Float
    "All values greater than or equal the given value."
    mass_gte: Float
    "All values that are contained in given list."
    mass_in: [Float!]
    "All values less than the given value."
    mass_lt: Float
    "All values less than or equal the given value."
    mass_lte: Float
    "All values that are not equal to given value."
    mass_not: Float
    "All values that are not contained in given list."
    mass_not_in: [Float!]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    species_every: SpeciesFilter
    species_none: SpeciesFilter
    species_some: SpeciesFilter
    starships_every: StarshipFilter
    starships_none: StarshipFilter
    starships_some: StarshipFilter
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
    vehicles_every: VehicleFilter
    vehicles_none: VehicleFilter
    vehicles_some: VehicleFilter
}

input PersonSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [PersonSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [PersonSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: PersonSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input PersonSubscriptionFilterNode {
    birthYear: String
    "All values containing the given string."
    birthYear_contains: String
    "All values ending with the given string."
    birthYear_ends_with: String
    "All values greater than the given value."
    birthYear_gt: String
    "All values greater than or equal the given value."
    birthYear_gte: String
    "All values that are contained in given list."
    birthYear_in: [String!]
    "All values less than the given value."
    birthYear_lt: String
    "All values less than or equal the given value."
    birthYear_lte: String
    "All values that are not equal to given value."
    birthYear_not: String
    "All values not containing the given string."
    birthYear_not_contains: String
    "All values not ending with the given string."
    birthYear_not_ends_with: String
    "All values that are not contained in given list."
    birthYear_not_in: [String!]
    "All values not starting with the given string."
    birthYear_not_starts_with: String
    "All values starting with the given string."
    birthYear_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    gender: PERSON_GENDER
    "All values that are contained in given list."
    gender_in: [PERSON_GENDER!]
    "All values that are not equal to given value."
    gender_not: PERSON_GENDER
    "All values that are not contained in given list."
    gender_not_in: [PERSON_GENDER!]
    height: Int
    "All values greater than the given value."
    height_gt: Int
    "All values greater than or equal the given value."
    height_gte: Int
    "All values that are contained in given list."
    height_in: [Int!]
    "All values less than the given value."
    height_lt: Int
    "All values less than or equal the given value."
    height_lte: Int
    "All values that are not equal to given value."
    height_not: Int
    "All values that are not contained in given list."
    height_not_in: [Int!]
    homeworld: PlanetFilter
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    mass: Float
    "All values greater than the given value."
    mass_gt: Float
    "All values greater than or equal the given value."
    mass_gte: Float
    "All values that are contained in given list."
    mass_in: [Float!]
    "All values less than the given value."
    mass_lt: Float
    "All values less than or equal the given value."
    mass_lte: Float
    "All values that are not equal to given value."
    mass_not: Float
    "All values that are not contained in given list."
    mass_not_in: [Float!]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    species_every: SpeciesFilter
    species_none: SpeciesFilter
    species_some: SpeciesFilter
    starships_every: StarshipFilter
    starships_none: StarshipFilter
    starships_some: StarshipFilter
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
    vehicles_every: VehicleFilter
    vehicles_none: VehicleFilter
    vehicles_some: VehicleFilter
}

input PersonfilmsFilm {
    characters: [FilmcharactersPerson!]
    charactersIds: [ID!]
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int!
    "indicates if the record is published"
    isPublished: Boolean
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    planets: [FilmplanetsPlanet!]
    planetsIds: [ID!]
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    species: [FilmspeciesSpecies!]
    speciesIds: [ID!]
    starships: [FilmstarshipsStarship!]
    starshipsIds: [ID!]
    "The title of this film"
    title: String!
    vehicles: [FilmvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input PersonhomeworldPlanet {
    "The climate of this planet."
    climate: [String!]
    "The diameter of this planet in kilometers."
    diameter: Int
    films: [PlanetfilmsFilm!]
    filmsIds: [ID!]
    "A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs."
    gravity: String
    "indicates if the record is published"
    isPublished: Boolean
    "The name of the planet"
    name: String!
    "The number of standard days it takes for this planet to complete a single orbit of its local star."
    orbitalPeriod: Int
    "The average population of sentient beings inhabiting this planet."
    population: Float
    residents: [PlanetresidentsPerson!]
    residentsIds: [ID!]
    "The number of standard hours it takes for this planet to complete a single rotation on its axis."
    rotationPeriod: Int
    "The percentage of the planet surface that is naturally occurring water or bodies of water."
    surfaceWater: Float
    "The terrain of this planet."
    terrain: [String!]
}

input PersonspeciesSpecies {
    "The average height of this species in centimeters."
    averageHeight: Int
    "The average lifespan of this species in years."
    averageLifespan: Int
    "The classification of this species, such as \"mammal\" or \"reptile\"."
    classification: String
    "The designation of this species, such as \"sentient\"."
    designation: String
    "The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
    eyeColor: [SPECIES_EYE_COLOR!]
    films: [SpeciesfilmsFilm!]
    filmsIds: [ID!]
    "The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
    hairColor: [SPECIES_HAIR_COLOR!]
    "indicates if the record is published"
    isPublished: Boolean
    "The language commonly spoken by this species."
    language: String
    "The name of this species."
    name: String!
    people: [SpeciespeoplePerson!]
    peopleIds: [ID!]
    "The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
    skinColor: [SPECIES_SKIN_COLOR!]
}

input PersonstarshipsStarship {
    "The maximum number of kilograms that this starship can transport."
    cargoCapacity: Float
    "The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\""
    class: String
    "The maximum length of time that this starship can provide consumables for its entire crew without having to resupply."
    consumables: String
    " The cost of this starship new, in galactic credits."
    costInCredits: Float
    "The number of personnel needed to run or pilot this starship."
    crew: Int
    films: [StarshipfilmsFilm!]
    filmsIds: [ID!]
    "The class of this starships hyperdrive."
    hyperdriveRating: Float
    "indicates if the record is published"
    isPublished: Boolean
    "The length of this starship in meters."
    length: Float
    "The manufacturer of this starship."
    manufacturer: [String!]
    " The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight."
    maxAtmospheringSpeed: Int
    "The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe."
    mglt: Int
    "The name of this starship. The common name, such as \"Death Star\"."
    name: String!
    " The number of non-essential people this starship can transport."
    passengers: Int
    pilots: [StarshippilotsPerson!]
    pilotsIds: [ID!]
}

input PersonvehiclesVehicle {
    "The maximum number of kilograms that this vehicle can transport."
    cargoCapacity: Int
    " The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\"."
    class: String
    "The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply."
    consumables: String
    "The cost of this vehicle new, in Galactic Credits."
    costInCredits: Int
    "The number of personnel needed to run or pilot this vehicle."
    crew: Int
    films: [VehiclefilmsFilm!]
    filmsIds: [ID!]
    "indicates if the record is published"
    isPublished: Boolean
    " The length of this vehicle in meters."
    length: Float
    "The manufacturer of this vehicle."
    manufacturer: [String!]
    "The maximum speed of this vehicle in the atmosphere."
    maxAtmospheringSpeed: Int
    "The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\"."
    model: String
    "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
    name: String!
    "The number of non-essential people this vehicle can transport."
    passengers: Int
    pilots: [VehiclepilotsPerson!]
    pilotsIds: [ID!]
}

input PlanetFilter {
    "Logical AND on all given filters."
    AND: [PlanetFilter!]
    "Logical OR on all given filters."
    OR: [PlanetFilter!]
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    diameter: Int
    "All values greater than the given value."
    diameter_gt: Int
    "All values greater than or equal the given value."
    diameter_gte: Int
    "All values that are contained in given list."
    diameter_in: [Int!]
    "All values less than the given value."
    diameter_lt: Int
    "All values less than or equal the given value."
    diameter_lte: Int
    "All values that are not equal to given value."
    diameter_not: Int
    "All values that are not contained in given list."
    diameter_not_in: [Int!]
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    gravity: String
    "All values containing the given string."
    gravity_contains: String
    "All values ending with the given string."
    gravity_ends_with: String
    "All values greater than the given value."
    gravity_gt: String
    "All values greater than or equal the given value."
    gravity_gte: String
    "All values that are contained in given list."
    gravity_in: [String!]
    "All values less than the given value."
    gravity_lt: String
    "All values less than or equal the given value."
    gravity_lte: String
    "All values that are not equal to given value."
    gravity_not: String
    "All values not containing the given string."
    gravity_not_contains: String
    "All values not ending with the given string."
    gravity_not_ends_with: String
    "All values that are not contained in given list."
    gravity_not_in: [String!]
    "All values not starting with the given string."
    gravity_not_starts_with: String
    "All values starting with the given string."
    gravity_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    orbitalPeriod: Int
    "All values greater than the given value."
    orbitalPeriod_gt: Int
    "All values greater than or equal the given value."
    orbitalPeriod_gte: Int
    "All values that are contained in given list."
    orbitalPeriod_in: [Int!]
    "All values less than the given value."
    orbitalPeriod_lt: Int
    "All values less than or equal the given value."
    orbitalPeriod_lte: Int
    "All values that are not equal to given value."
    orbitalPeriod_not: Int
    "All values that are not contained in given list."
    orbitalPeriod_not_in: [Int!]
    population: Float
    "All values greater than the given value."
    population_gt: Float
    "All values greater than or equal the given value."
    population_gte: Float
    "All values that are contained in given list."
    population_in: [Float!]
    "All values less than the given value."
    population_lt: Float
    "All values less than or equal the given value."
    population_lte: Float
    "All values that are not equal to given value."
    population_not: Float
    "All values that are not contained in given list."
    population_not_in: [Float!]
    residents_every: PersonFilter
    residents_none: PersonFilter
    residents_some: PersonFilter
    rotationPeriod: Int
    "All values greater than the given value."
    rotationPeriod_gt: Int
    "All values greater than or equal the given value."
    rotationPeriod_gte: Int
    "All values that are contained in given list."
    rotationPeriod_in: [Int!]
    "All values less than the given value."
    rotationPeriod_lt: Int
    "All values less than or equal the given value."
    rotationPeriod_lte: Int
    "All values that are not equal to given value."
    rotationPeriod_not: Int
    "All values that are not contained in given list."
    rotationPeriod_not_in: [Int!]
    surfaceWater: Float
    "All values greater than the given value."
    surfaceWater_gt: Float
    "All values greater than or equal the given value."
    surfaceWater_gte: Float
    "All values that are contained in given list."
    surfaceWater_in: [Float!]
    "All values less than the given value."
    surfaceWater_lt: Float
    "All values less than or equal the given value."
    surfaceWater_lte: Float
    "All values that are not equal to given value."
    surfaceWater_not: Float
    "All values that are not contained in given list."
    surfaceWater_not_in: [Float!]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input PlanetSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [PlanetSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [PlanetSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: PlanetSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input PlanetSubscriptionFilterNode {
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    diameter: Int
    "All values greater than the given value."
    diameter_gt: Int
    "All values greater than or equal the given value."
    diameter_gte: Int
    "All values that are contained in given list."
    diameter_in: [Int!]
    "All values less than the given value."
    diameter_lt: Int
    "All values less than or equal the given value."
    diameter_lte: Int
    "All values that are not equal to given value."
    diameter_not: Int
    "All values that are not contained in given list."
    diameter_not_in: [Int!]
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    gravity: String
    "All values containing the given string."
    gravity_contains: String
    "All values ending with the given string."
    gravity_ends_with: String
    "All values greater than the given value."
    gravity_gt: String
    "All values greater than or equal the given value."
    gravity_gte: String
    "All values that are contained in given list."
    gravity_in: [String!]
    "All values less than the given value."
    gravity_lt: String
    "All values less than or equal the given value."
    gravity_lte: String
    "All values that are not equal to given value."
    gravity_not: String
    "All values not containing the given string."
    gravity_not_contains: String
    "All values not ending with the given string."
    gravity_not_ends_with: String
    "All values that are not contained in given list."
    gravity_not_in: [String!]
    "All values not starting with the given string."
    gravity_not_starts_with: String
    "All values starting with the given string."
    gravity_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    orbitalPeriod: Int
    "All values greater than the given value."
    orbitalPeriod_gt: Int
    "All values greater than or equal the given value."
    orbitalPeriod_gte: Int
    "All values that are contained in given list."
    orbitalPeriod_in: [Int!]
    "All values less than the given value."
    orbitalPeriod_lt: Int
    "All values less than or equal the given value."
    orbitalPeriod_lte: Int
    "All values that are not equal to given value."
    orbitalPeriod_not: Int
    "All values that are not contained in given list."
    orbitalPeriod_not_in: [Int!]
    population: Float
    "All values greater than the given value."
    population_gt: Float
    "All values greater than or equal the given value."
    population_gte: Float
    "All values that are contained in given list."
    population_in: [Float!]
    "All values less than the given value."
    population_lt: Float
    "All values less than or equal the given value."
    population_lte: Float
    "All values that are not equal to given value."
    population_not: Float
    "All values that are not contained in given list."
    population_not_in: [Float!]
    residents_every: PersonFilter
    residents_none: PersonFilter
    residents_some: PersonFilter
    rotationPeriod: Int
    "All values greater than the given value."
    rotationPeriod_gt: Int
    "All values greater than or equal the given value."
    rotationPeriod_gte: Int
    "All values that are contained in given list."
    rotationPeriod_in: [Int!]
    "All values less than the given value."
    rotationPeriod_lt: Int
    "All values less than or equal the given value."
    rotationPeriod_lte: Int
    "All values that are not equal to given value."
    rotationPeriod_not: Int
    "All values that are not contained in given list."
    rotationPeriod_not_in: [Int!]
    surfaceWater: Float
    "All values greater than the given value."
    surfaceWater_gt: Float
    "All values greater than or equal the given value."
    surfaceWater_gte: Float
    "All values that are contained in given list."
    surfaceWater_in: [Float!]
    "All values less than the given value."
    surfaceWater_lt: Float
    "All values less than or equal the given value."
    surfaceWater_lte: Float
    "All values that are not equal to given value."
    surfaceWater_not: Float
    "All values that are not contained in given list."
    surfaceWater_not_in: [Float!]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input PlanetfilmsFilm {
    characters: [FilmcharactersPerson!]
    charactersIds: [ID!]
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int!
    "indicates if the record is published"
    isPublished: Boolean
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    planets: [FilmplanetsPlanet!]
    planetsIds: [ID!]
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    species: [FilmspeciesSpecies!]
    speciesIds: [ID!]
    starships: [FilmstarshipsStarship!]
    starshipsIds: [ID!]
    "The title of this film"
    title: String!
    vehicles: [FilmvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input PlanetresidentsPerson {
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    films: [PersonfilmsFilm!]
    filmsIds: [ID!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    "indicates if the record is published"
    isPublished: Boolean
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String!
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    species: [PersonspeciesSpecies!]
    speciesIds: [ID!]
    starships: [PersonstarshipsStarship!]
    starshipsIds: [ID!]
    vehicles: [PersonvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input SpeciesFilter {
    "Logical AND on all given filters."
    AND: [SpeciesFilter!]
    "Logical OR on all given filters."
    OR: [SpeciesFilter!]
    averageHeight: Int
    "All values greater than the given value."
    averageHeight_gt: Int
    "All values greater than or equal the given value."
    averageHeight_gte: Int
    "All values that are contained in given list."
    averageHeight_in: [Int!]
    "All values less than the given value."
    averageHeight_lt: Int
    "All values less than or equal the given value."
    averageHeight_lte: Int
    "All values that are not equal to given value."
    averageHeight_not: Int
    "All values that are not contained in given list."
    averageHeight_not_in: [Int!]
    averageLifespan: Int
    "All values greater than the given value."
    averageLifespan_gt: Int
    "All values greater than or equal the given value."
    averageLifespan_gte: Int
    "All values that are contained in given list."
    averageLifespan_in: [Int!]
    "All values less than the given value."
    averageLifespan_lt: Int
    "All values less than or equal the given value."
    averageLifespan_lte: Int
    "All values that are not equal to given value."
    averageLifespan_not: Int
    "All values that are not contained in given list."
    averageLifespan_not_in: [Int!]
    classification: String
    "All values containing the given string."
    classification_contains: String
    "All values ending with the given string."
    classification_ends_with: String
    "All values greater than the given value."
    classification_gt: String
    "All values greater than or equal the given value."
    classification_gte: String
    "All values that are contained in given list."
    classification_in: [String!]
    "All values less than the given value."
    classification_lt: String
    "All values less than or equal the given value."
    classification_lte: String
    "All values that are not equal to given value."
    classification_not: String
    "All values not containing the given string."
    classification_not_contains: String
    "All values not ending with the given string."
    classification_not_ends_with: String
    "All values that are not contained in given list."
    classification_not_in: [String!]
    "All values not starting with the given string."
    classification_not_starts_with: String
    "All values starting with the given string."
    classification_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    designation: String
    "All values containing the given string."
    designation_contains: String
    "All values ending with the given string."
    designation_ends_with: String
    "All values greater than the given value."
    designation_gt: String
    "All values greater than or equal the given value."
    designation_gte: String
    "All values that are contained in given list."
    designation_in: [String!]
    "All values less than the given value."
    designation_lt: String
    "All values less than or equal the given value."
    designation_lte: String
    "All values that are not equal to given value."
    designation_not: String
    "All values not containing the given string."
    designation_not_contains: String
    "All values not ending with the given string."
    designation_not_ends_with: String
    "All values that are not contained in given list."
    designation_not_in: [String!]
    "All values not starting with the given string."
    designation_not_starts_with: String
    "All values starting with the given string."
    designation_starts_with: String
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    language: String
    "All values containing the given string."
    language_contains: String
    "All values ending with the given string."
    language_ends_with: String
    "All values greater than the given value."
    language_gt: String
    "All values greater than or equal the given value."
    language_gte: String
    "All values that are contained in given list."
    language_in: [String!]
    "All values less than the given value."
    language_lt: String
    "All values less than or equal the given value."
    language_lte: String
    "All values that are not equal to given value."
    language_not: String
    "All values not containing the given string."
    language_not_contains: String
    "All values not ending with the given string."
    language_not_ends_with: String
    "All values that are not contained in given list."
    language_not_in: [String!]
    "All values not starting with the given string."
    language_not_starts_with: String
    "All values starting with the given string."
    language_starts_with: String
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    people_every: PersonFilter
    people_none: PersonFilter
    people_some: PersonFilter
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input SpeciesSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [SpeciesSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [SpeciesSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: SpeciesSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input SpeciesSubscriptionFilterNode {
    averageHeight: Int
    "All values greater than the given value."
    averageHeight_gt: Int
    "All values greater than or equal the given value."
    averageHeight_gte: Int
    "All values that are contained in given list."
    averageHeight_in: [Int!]
    "All values less than the given value."
    averageHeight_lt: Int
    "All values less than or equal the given value."
    averageHeight_lte: Int
    "All values that are not equal to given value."
    averageHeight_not: Int
    "All values that are not contained in given list."
    averageHeight_not_in: [Int!]
    averageLifespan: Int
    "All values greater than the given value."
    averageLifespan_gt: Int
    "All values greater than or equal the given value."
    averageLifespan_gte: Int
    "All values that are contained in given list."
    averageLifespan_in: [Int!]
    "All values less than the given value."
    averageLifespan_lt: Int
    "All values less than or equal the given value."
    averageLifespan_lte: Int
    "All values that are not equal to given value."
    averageLifespan_not: Int
    "All values that are not contained in given list."
    averageLifespan_not_in: [Int!]
    classification: String
    "All values containing the given string."
    classification_contains: String
    "All values ending with the given string."
    classification_ends_with: String
    "All values greater than the given value."
    classification_gt: String
    "All values greater than or equal the given value."
    classification_gte: String
    "All values that are contained in given list."
    classification_in: [String!]
    "All values less than the given value."
    classification_lt: String
    "All values less than or equal the given value."
    classification_lte: String
    "All values that are not equal to given value."
    classification_not: String
    "All values not containing the given string."
    classification_not_contains: String
    "All values not ending with the given string."
    classification_not_ends_with: String
    "All values that are not contained in given list."
    classification_not_in: [String!]
    "All values not starting with the given string."
    classification_not_starts_with: String
    "All values starting with the given string."
    classification_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    designation: String
    "All values containing the given string."
    designation_contains: String
    "All values ending with the given string."
    designation_ends_with: String
    "All values greater than the given value."
    designation_gt: String
    "All values greater than or equal the given value."
    designation_gte: String
    "All values that are contained in given list."
    designation_in: [String!]
    "All values less than the given value."
    designation_lt: String
    "All values less than or equal the given value."
    designation_lte: String
    "All values that are not equal to given value."
    designation_not: String
    "All values not containing the given string."
    designation_not_contains: String
    "All values not ending with the given string."
    designation_not_ends_with: String
    "All values that are not contained in given list."
    designation_not_in: [String!]
    "All values not starting with the given string."
    designation_not_starts_with: String
    "All values starting with the given string."
    designation_starts_with: String
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    language: String
    "All values containing the given string."
    language_contains: String
    "All values ending with the given string."
    language_ends_with: String
    "All values greater than the given value."
    language_gt: String
    "All values greater than or equal the given value."
    language_gte: String
    "All values that are contained in given list."
    language_in: [String!]
    "All values less than the given value."
    language_lt: String
    "All values less than or equal the given value."
    language_lte: String
    "All values that are not equal to given value."
    language_not: String
    "All values not containing the given string."
    language_not_contains: String
    "All values not ending with the given string."
    language_not_ends_with: String
    "All values that are not contained in given list."
    language_not_in: [String!]
    "All values not starting with the given string."
    language_not_starts_with: String
    "All values starting with the given string."
    language_starts_with: String
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    people_every: PersonFilter
    people_none: PersonFilter
    people_some: PersonFilter
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input SpeciesfilmsFilm {
    characters: [FilmcharactersPerson!]
    charactersIds: [ID!]
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int!
    "indicates if the record is published"
    isPublished: Boolean
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    planets: [FilmplanetsPlanet!]
    planetsIds: [ID!]
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    species: [FilmspeciesSpecies!]
    speciesIds: [ID!]
    starships: [FilmstarshipsStarship!]
    starshipsIds: [ID!]
    "The title of this film"
    title: String!
    vehicles: [FilmvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input SpeciespeoplePerson {
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    films: [PersonfilmsFilm!]
    filmsIds: [ID!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    homeworld: PersonhomeworldPlanet
    homeworldId: ID
    "indicates if the record is published"
    isPublished: Boolean
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String!
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    species: [PersonspeciesSpecies!]
    speciesIds: [ID!]
    starships: [PersonstarshipsStarship!]
    starshipsIds: [ID!]
    vehicles: [PersonvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input StarshipFilter {
    "Logical AND on all given filters."
    AND: [StarshipFilter!]
    "Logical OR on all given filters."
    OR: [StarshipFilter!]
    cargoCapacity: Float
    "All values greater than the given value."
    cargoCapacity_gt: Float
    "All values greater than or equal the given value."
    cargoCapacity_gte: Float
    "All values that are contained in given list."
    cargoCapacity_in: [Float!]
    "All values less than the given value."
    cargoCapacity_lt: Float
    "All values less than or equal the given value."
    cargoCapacity_lte: Float
    "All values that are not equal to given value."
    cargoCapacity_not: Float
    "All values that are not contained in given list."
    cargoCapacity_not_in: [Float!]
    class: String
    "All values containing the given string."
    class_contains: String
    "All values ending with the given string."
    class_ends_with: String
    "All values greater than the given value."
    class_gt: String
    "All values greater than or equal the given value."
    class_gte: String
    "All values that are contained in given list."
    class_in: [String!]
    "All values less than the given value."
    class_lt: String
    "All values less than or equal the given value."
    class_lte: String
    "All values that are not equal to given value."
    class_not: String
    "All values not containing the given string."
    class_not_contains: String
    "All values not ending with the given string."
    class_not_ends_with: String
    "All values that are not contained in given list."
    class_not_in: [String!]
    "All values not starting with the given string."
    class_not_starts_with: String
    "All values starting with the given string."
    class_starts_with: String
    consumables: String
    "All values containing the given string."
    consumables_contains: String
    "All values ending with the given string."
    consumables_ends_with: String
    "All values greater than the given value."
    consumables_gt: String
    "All values greater than or equal the given value."
    consumables_gte: String
    "All values that are contained in given list."
    consumables_in: [String!]
    "All values less than the given value."
    consumables_lt: String
    "All values less than or equal the given value."
    consumables_lte: String
    "All values that are not equal to given value."
    consumables_not: String
    "All values not containing the given string."
    consumables_not_contains: String
    "All values not ending with the given string."
    consumables_not_ends_with: String
    "All values that are not contained in given list."
    consumables_not_in: [String!]
    "All values not starting with the given string."
    consumables_not_starts_with: String
    "All values starting with the given string."
    consumables_starts_with: String
    costInCredits: Float
    "All values greater than the given value."
    costInCredits_gt: Float
    "All values greater than or equal the given value."
    costInCredits_gte: Float
    "All values that are contained in given list."
    costInCredits_in: [Float!]
    "All values less than the given value."
    costInCredits_lt: Float
    "All values less than or equal the given value."
    costInCredits_lte: Float
    "All values that are not equal to given value."
    costInCredits_not: Float
    "All values that are not contained in given list."
    costInCredits_not_in: [Float!]
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    crew: Int
    "All values greater than the given value."
    crew_gt: Int
    "All values greater than or equal the given value."
    crew_gte: Int
    "All values that are contained in given list."
    crew_in: [Int!]
    "All values less than the given value."
    crew_lt: Int
    "All values less than or equal the given value."
    crew_lte: Int
    "All values that are not equal to given value."
    crew_not: Int
    "All values that are not contained in given list."
    crew_not_in: [Int!]
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    hyperdriveRating: Float
    "All values greater than the given value."
    hyperdriveRating_gt: Float
    "All values greater than or equal the given value."
    hyperdriveRating_gte: Float
    "All values that are contained in given list."
    hyperdriveRating_in: [Float!]
    "All values less than the given value."
    hyperdriveRating_lt: Float
    "All values less than or equal the given value."
    hyperdriveRating_lte: Float
    "All values that are not equal to given value."
    hyperdriveRating_not: Float
    "All values that are not contained in given list."
    hyperdriveRating_not_in: [Float!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    length: Float
    "All values greater than the given value."
    length_gt: Float
    "All values greater than or equal the given value."
    length_gte: Float
    "All values that are contained in given list."
    length_in: [Float!]
    "All values less than the given value."
    length_lt: Float
    "All values less than or equal the given value."
    length_lte: Float
    "All values that are not equal to given value."
    length_not: Float
    "All values that are not contained in given list."
    length_not_in: [Float!]
    maxAtmospheringSpeed: Int
    "All values greater than the given value."
    maxAtmospheringSpeed_gt: Int
    "All values greater than or equal the given value."
    maxAtmospheringSpeed_gte: Int
    "All values that are contained in given list."
    maxAtmospheringSpeed_in: [Int!]
    "All values less than the given value."
    maxAtmospheringSpeed_lt: Int
    "All values less than or equal the given value."
    maxAtmospheringSpeed_lte: Int
    "All values that are not equal to given value."
    maxAtmospheringSpeed_not: Int
    "All values that are not contained in given list."
    maxAtmospheringSpeed_not_in: [Int!]
    mglt: Int
    "All values greater than the given value."
    mglt_gt: Int
    "All values greater than or equal the given value."
    mglt_gte: Int
    "All values that are contained in given list."
    mglt_in: [Int!]
    "All values less than the given value."
    mglt_lt: Int
    "All values less than or equal the given value."
    mglt_lte: Int
    "All values that are not equal to given value."
    mglt_not: Int
    "All values that are not contained in given list."
    mglt_not_in: [Int!]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    passengers: Int
    "All values greater than the given value."
    passengers_gt: Int
    "All values greater than or equal the given value."
    passengers_gte: Int
    "All values that are contained in given list."
    passengers_in: [Int!]
    "All values less than the given value."
    passengers_lt: Int
    "All values less than or equal the given value."
    passengers_lte: Int
    "All values that are not equal to given value."
    passengers_not: Int
    "All values that are not contained in given list."
    passengers_not_in: [Int!]
    pilots_every: PersonFilter
    pilots_none: PersonFilter
    pilots_some: PersonFilter
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input StarshipSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [StarshipSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [StarshipSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: StarshipSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input StarshipSubscriptionFilterNode {
    cargoCapacity: Float
    "All values greater than the given value."
    cargoCapacity_gt: Float
    "All values greater than or equal the given value."
    cargoCapacity_gte: Float
    "All values that are contained in given list."
    cargoCapacity_in: [Float!]
    "All values less than the given value."
    cargoCapacity_lt: Float
    "All values less than or equal the given value."
    cargoCapacity_lte: Float
    "All values that are not equal to given value."
    cargoCapacity_not: Float
    "All values that are not contained in given list."
    cargoCapacity_not_in: [Float!]
    class: String
    "All values containing the given string."
    class_contains: String
    "All values ending with the given string."
    class_ends_with: String
    "All values greater than the given value."
    class_gt: String
    "All values greater than or equal the given value."
    class_gte: String
    "All values that are contained in given list."
    class_in: [String!]
    "All values less than the given value."
    class_lt: String
    "All values less than or equal the given value."
    class_lte: String
    "All values that are not equal to given value."
    class_not: String
    "All values not containing the given string."
    class_not_contains: String
    "All values not ending with the given string."
    class_not_ends_with: String
    "All values that are not contained in given list."
    class_not_in: [String!]
    "All values not starting with the given string."
    class_not_starts_with: String
    "All values starting with the given string."
    class_starts_with: String
    consumables: String
    "All values containing the given string."
    consumables_contains: String
    "All values ending with the given string."
    consumables_ends_with: String
    "All values greater than the given value."
    consumables_gt: String
    "All values greater than or equal the given value."
    consumables_gte: String
    "All values that are contained in given list."
    consumables_in: [String!]
    "All values less than the given value."
    consumables_lt: String
    "All values less than or equal the given value."
    consumables_lte: String
    "All values that are not equal to given value."
    consumables_not: String
    "All values not containing the given string."
    consumables_not_contains: String
    "All values not ending with the given string."
    consumables_not_ends_with: String
    "All values that are not contained in given list."
    consumables_not_in: [String!]
    "All values not starting with the given string."
    consumables_not_starts_with: String
    "All values starting with the given string."
    consumables_starts_with: String
    costInCredits: Float
    "All values greater than the given value."
    costInCredits_gt: Float
    "All values greater than or equal the given value."
    costInCredits_gte: Float
    "All values that are contained in given list."
    costInCredits_in: [Float!]
    "All values less than the given value."
    costInCredits_lt: Float
    "All values less than or equal the given value."
    costInCredits_lte: Float
    "All values that are not equal to given value."
    costInCredits_not: Float
    "All values that are not contained in given list."
    costInCredits_not_in: [Float!]
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    crew: Int
    "All values greater than the given value."
    crew_gt: Int
    "All values greater than or equal the given value."
    crew_gte: Int
    "All values that are contained in given list."
    crew_in: [Int!]
    "All values less than the given value."
    crew_lt: Int
    "All values less than or equal the given value."
    crew_lte: Int
    "All values that are not equal to given value."
    crew_not: Int
    "All values that are not contained in given list."
    crew_not_in: [Int!]
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    hyperdriveRating: Float
    "All values greater than the given value."
    hyperdriveRating_gt: Float
    "All values greater than or equal the given value."
    hyperdriveRating_gte: Float
    "All values that are contained in given list."
    hyperdriveRating_in: [Float!]
    "All values less than the given value."
    hyperdriveRating_lt: Float
    "All values less than or equal the given value."
    hyperdriveRating_lte: Float
    "All values that are not equal to given value."
    hyperdriveRating_not: Float
    "All values that are not contained in given list."
    hyperdriveRating_not_in: [Float!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    length: Float
    "All values greater than the given value."
    length_gt: Float
    "All values greater than or equal the given value."
    length_gte: Float
    "All values that are contained in given list."
    length_in: [Float!]
    "All values less than the given value."
    length_lt: Float
    "All values less than or equal the given value."
    length_lte: Float
    "All values that are not equal to given value."
    length_not: Float
    "All values that are not contained in given list."
    length_not_in: [Float!]
    maxAtmospheringSpeed: Int
    "All values greater than the given value."
    maxAtmospheringSpeed_gt: Int
    "All values greater than or equal the given value."
    maxAtmospheringSpeed_gte: Int
    "All values that are contained in given list."
    maxAtmospheringSpeed_in: [Int!]
    "All values less than the given value."
    maxAtmospheringSpeed_lt: Int
    "All values less than or equal the given value."
    maxAtmospheringSpeed_lte: Int
    "All values that are not equal to given value."
    maxAtmospheringSpeed_not: Int
    "All values that are not contained in given list."
    maxAtmospheringSpeed_not_in: [Int!]
    mglt: Int
    "All values greater than the given value."
    mglt_gt: Int
    "All values greater than or equal the given value."
    mglt_gte: Int
    "All values that are contained in given list."
    mglt_in: [Int!]
    "All values less than the given value."
    mglt_lt: Int
    "All values less than or equal the given value."
    mglt_lte: Int
    "All values that are not equal to given value."
    mglt_not: Int
    "All values that are not contained in given list."
    mglt_not_in: [Int!]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    passengers: Int
    "All values greater than the given value."
    passengers_gt: Int
    "All values greater than or equal the given value."
    passengers_gte: Int
    "All values that are contained in given list."
    passengers_in: [Int!]
    "All values less than the given value."
    passengers_lt: Int
    "All values less than or equal the given value."
    passengers_lte: Int
    "All values that are not equal to given value."
    passengers_not: Int
    "All values that are not contained in given list."
    passengers_not_in: [Int!]
    pilots_every: PersonFilter
    pilots_none: PersonFilter
    pilots_some: PersonFilter
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input StarshipfilmsFilm {
    characters: [FilmcharactersPerson!]
    charactersIds: [ID!]
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int!
    "indicates if the record is published"
    isPublished: Boolean
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    planets: [FilmplanetsPlanet!]
    planetsIds: [ID!]
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    species: [FilmspeciesSpecies!]
    speciesIds: [ID!]
    starships: [FilmstarshipsStarship!]
    starshipsIds: [ID!]
    "The title of this film"
    title: String!
    vehicles: [FilmvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input StarshippilotsPerson {
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    films: [PersonfilmsFilm!]
    filmsIds: [ID!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    homeworld: PersonhomeworldPlanet
    homeworldId: ID
    "indicates if the record is published"
    isPublished: Boolean
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String!
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    species: [PersonspeciesSpecies!]
    speciesIds: [ID!]
    starships: [PersonstarshipsStarship!]
    starshipsIds: [ID!]
    vehicles: [PersonvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input UpdateAsset {
    "Original File Name"
    fileName: String
    "The File Handle"
    handle: String
    "The height of the file in case it is an image"
    height: Float
    id: ID!
    "The Mime Type"
    mimeType: String
    "The Size Of The File"
    size: Float
    "The Url Of The Asset"
    url: String
    "The width of the file in case it is an image"
    width: Float
}

input UpdateFilm {
    characters: [FilmcharactersPerson!]
    charactersIds: [ID!]
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    planets: [FilmplanetsPlanet!]
    planetsIds: [ID!]
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    species: [FilmspeciesSpecies!]
    speciesIds: [ID!]
    starships: [FilmstarshipsStarship!]
    starshipsIds: [ID!]
    "The title of this film"
    title: String
    vehicles: [FilmvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input UpdatePerson {
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    films: [PersonfilmsFilm!]
    filmsIds: [ID!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    homeworld: PersonhomeworldPlanet
    homeworldId: ID
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    species: [PersonspeciesSpecies!]
    speciesIds: [ID!]
    starships: [PersonstarshipsStarship!]
    starshipsIds: [ID!]
    vehicles: [PersonvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input UpdatePlanet {
    "The climate of this planet."
    climate: [String!]
    "The diameter of this planet in kilometers."
    diameter: Int
    films: [PlanetfilmsFilm!]
    filmsIds: [ID!]
    "A number denoting the gravity of this planet, where \"1\" is normal or 1 standard G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs."
    gravity: String
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean
    "The name of the planet"
    name: String
    "The number of standard days it takes for this planet to complete a single orbit of its local star."
    orbitalPeriod: Int
    "The average population of sentient beings inhabiting this planet."
    population: Float
    residents: [PlanetresidentsPerson!]
    residentsIds: [ID!]
    "The number of standard hours it takes for this planet to complete a single rotation on its axis."
    rotationPeriod: Int
    "The percentage of the planet surface that is naturally occurring water or bodies of water."
    surfaceWater: Float
    "The terrain of this planet."
    terrain: [String!]
}

input UpdateSpecies {
    "The average height of this species in centimeters."
    averageHeight: Int
    "The average lifespan of this species in years."
    averageLifespan: Int
    "The classification of this species, such as \"mammal\" or \"reptile\"."
    classification: String
    "The designation of this species, such as \"sentient\"."
    designation: String
    "The eye colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have eyes."
    eyeColor: [SPECIES_EYE_COLOR!]
    films: [SpeciesfilmsFilm!]
    filmsIds: [ID!]
    "The hair colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have hairs."
    hairColor: [SPECIES_HAIR_COLOR!]
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean
    "The language commonly spoken by this species."
    language: String
    "The name of this species."
    name: String
    people: [SpeciespeoplePerson!]
    peopleIds: [ID!]
    "The skin colors for this species, \"UNKNOWN\" if not known, null if this species does not typically have a skin."
    skinColor: [SPECIES_SKIN_COLOR!]
}

input UpdateStarship {
    "The maximum number of kilograms that this starship can transport."
    cargoCapacity: Float
    "The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile Battlestation\""
    class: String
    "The maximum length of time that this starship can provide consumables for its entire crew without having to resupply."
    consumables: String
    " The cost of this starship new, in galactic credits."
    costInCredits: Float
    "The number of personnel needed to run or pilot this starship."
    crew: Int
    films: [StarshipfilmsFilm!]
    filmsIds: [ID!]
    "The class of this starships hyperdrive."
    hyperdriveRating: Float
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean
    "The length of this starship in meters."
    length: Float
    "The manufacturer of this starship."
    manufacturer: [String!]
    " The maximum speed of this starship in the atmosphere. null if this starship is incapable of atmospheric flight."
    maxAtmospheringSpeed: Int
    "The Maximum number of Megalights this starship can travel in a standard hour. A \"Megalight\" is a standard unit of distance and has never been defined before within the Star Wars universe."
    mglt: Int
    "The name of this starship. The common name, such as \"Death Star\"."
    name: String
    " The number of non-essential people this starship can transport."
    passengers: Int
    pilots: [StarshippilotsPerson!]
    pilotsIds: [ID!]
}

input UpdateVehicle {
    "The maximum number of kilograms that this vehicle can transport."
    cargoCapacity: Int
    " The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\"."
    class: String
    "The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply."
    consumables: String
    "The cost of this vehicle new, in Galactic Credits."
    costInCredits: Int
    "The number of personnel needed to run or pilot this vehicle."
    crew: Int
    films: [VehiclefilmsFilm!]
    filmsIds: [ID!]
    id: ID!
    "indicates if the record is published"
    isPublished: Boolean
    " The length of this vehicle in meters."
    length: Float
    "The manufacturer of this vehicle."
    manufacturer: [String!]
    "The maximum speed of this vehicle in the atmosphere."
    maxAtmospheringSpeed: Int
    "The model or official name of this vehicle. Such as \"All-Terrain Attack Transport\"."
    model: String
    "The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder bike\"."
    name: String
    "The number of non-essential people this vehicle can transport."
    passengers: Int
    pilots: [VehiclepilotsPerson!]
    pilotsIds: [ID!]
}

input VehicleFilter {
    "Logical AND on all given filters."
    AND: [VehicleFilter!]
    "Logical OR on all given filters."
    OR: [VehicleFilter!]
    cargoCapacity: Int
    "All values greater than the given value."
    cargoCapacity_gt: Int
    "All values greater than or equal the given value."
    cargoCapacity_gte: Int
    "All values that are contained in given list."
    cargoCapacity_in: [Int!]
    "All values less than the given value."
    cargoCapacity_lt: Int
    "All values less than or equal the given value."
    cargoCapacity_lte: Int
    "All values that are not equal to given value."
    cargoCapacity_not: Int
    "All values that are not contained in given list."
    cargoCapacity_not_in: [Int!]
    class: String
    "All values containing the given string."
    class_contains: String
    "All values ending with the given string."
    class_ends_with: String
    "All values greater than the given value."
    class_gt: String
    "All values greater than or equal the given value."
    class_gte: String
    "All values that are contained in given list."
    class_in: [String!]
    "All values less than the given value."
    class_lt: String
    "All values less than or equal the given value."
    class_lte: String
    "All values that are not equal to given value."
    class_not: String
    "All values not containing the given string."
    class_not_contains: String
    "All values not ending with the given string."
    class_not_ends_with: String
    "All values that are not contained in given list."
    class_not_in: [String!]
    "All values not starting with the given string."
    class_not_starts_with: String
    "All values starting with the given string."
    class_starts_with: String
    consumables: String
    "All values containing the given string."
    consumables_contains: String
    "All values ending with the given string."
    consumables_ends_with: String
    "All values greater than the given value."
    consumables_gt: String
    "All values greater than or equal the given value."
    consumables_gte: String
    "All values that are contained in given list."
    consumables_in: [String!]
    "All values less than the given value."
    consumables_lt: String
    "All values less than or equal the given value."
    consumables_lte: String
    "All values that are not equal to given value."
    consumables_not: String
    "All values not containing the given string."
    consumables_not_contains: String
    "All values not ending with the given string."
    consumables_not_ends_with: String
    "All values that are not contained in given list."
    consumables_not_in: [String!]
    "All values not starting with the given string."
    consumables_not_starts_with: String
    "All values starting with the given string."
    consumables_starts_with: String
    costInCredits: Int
    "All values greater than the given value."
    costInCredits_gt: Int
    "All values greater than or equal the given value."
    costInCredits_gte: Int
    "All values that are contained in given list."
    costInCredits_in: [Int!]
    "All values less than the given value."
    costInCredits_lt: Int
    "All values less than or equal the given value."
    costInCredits_lte: Int
    "All values that are not equal to given value."
    costInCredits_not: Int
    "All values that are not contained in given list."
    costInCredits_not_in: [Int!]
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    crew: Int
    "All values greater than the given value."
    crew_gt: Int
    "All values greater than or equal the given value."
    crew_gte: Int
    "All values that are contained in given list."
    crew_in: [Int!]
    "All values less than the given value."
    crew_lt: Int
    "All values less than or equal the given value."
    crew_lte: Int
    "All values that are not equal to given value."
    crew_not: Int
    "All values that are not contained in given list."
    crew_not_in: [Int!]
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    length: Float
    "All values greater than the given value."
    length_gt: Float
    "All values greater than or equal the given value."
    length_gte: Float
    "All values that are contained in given list."
    length_in: [Float!]
    "All values less than the given value."
    length_lt: Float
    "All values less than or equal the given value."
    length_lte: Float
    "All values that are not equal to given value."
    length_not: Float
    "All values that are not contained in given list."
    length_not_in: [Float!]
    maxAtmospheringSpeed: Int
    "All values greater than the given value."
    maxAtmospheringSpeed_gt: Int
    "All values greater than or equal the given value."
    maxAtmospheringSpeed_gte: Int
    "All values that are contained in given list."
    maxAtmospheringSpeed_in: [Int!]
    "All values less than the given value."
    maxAtmospheringSpeed_lt: Int
    "All values less than or equal the given value."
    maxAtmospheringSpeed_lte: Int
    "All values that are not equal to given value."
    maxAtmospheringSpeed_not: Int
    "All values that are not contained in given list."
    maxAtmospheringSpeed_not_in: [Int!]
    model: String
    "All values containing the given string."
    model_contains: String
    "All values ending with the given string."
    model_ends_with: String
    "All values greater than the given value."
    model_gt: String
    "All values greater than or equal the given value."
    model_gte: String
    "All values that are contained in given list."
    model_in: [String!]
    "All values less than the given value."
    model_lt: String
    "All values less than or equal the given value."
    model_lte: String
    "All values that are not equal to given value."
    model_not: String
    "All values not containing the given string."
    model_not_contains: String
    "All values not ending with the given string."
    model_not_ends_with: String
    "All values that are not contained in given list."
    model_not_in: [String!]
    "All values not starting with the given string."
    model_not_starts_with: String
    "All values starting with the given string."
    model_starts_with: String
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    passengers: Int
    "All values greater than the given value."
    passengers_gt: Int
    "All values greater than or equal the given value."
    passengers_gte: Int
    "All values that are contained in given list."
    passengers_in: [Int!]
    "All values less than the given value."
    passengers_lt: Int
    "All values less than or equal the given value."
    passengers_lte: Int
    "All values that are not equal to given value."
    passengers_not: Int
    "All values that are not contained in given list."
    passengers_not_in: [Int!]
    pilots_every: PersonFilter
    pilots_none: PersonFilter
    pilots_some: PersonFilter
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input VehicleSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [VehicleSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [VehicleSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: VehicleSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input VehicleSubscriptionFilterNode {
    cargoCapacity: Int
    "All values greater than the given value."
    cargoCapacity_gt: Int
    "All values greater than or equal the given value."
    cargoCapacity_gte: Int
    "All values that are contained in given list."
    cargoCapacity_in: [Int!]
    "All values less than the given value."
    cargoCapacity_lt: Int
    "All values less than or equal the given value."
    cargoCapacity_lte: Int
    "All values that are not equal to given value."
    cargoCapacity_not: Int
    "All values that are not contained in given list."
    cargoCapacity_not_in: [Int!]
    class: String
    "All values containing the given string."
    class_contains: String
    "All values ending with the given string."
    class_ends_with: String
    "All values greater than the given value."
    class_gt: String
    "All values greater than or equal the given value."
    class_gte: String
    "All values that are contained in given list."
    class_in: [String!]
    "All values less than the given value."
    class_lt: String
    "All values less than or equal the given value."
    class_lte: String
    "All values that are not equal to given value."
    class_not: String
    "All values not containing the given string."
    class_not_contains: String
    "All values not ending with the given string."
    class_not_ends_with: String
    "All values that are not contained in given list."
    class_not_in: [String!]
    "All values not starting with the given string."
    class_not_starts_with: String
    "All values starting with the given string."
    class_starts_with: String
    consumables: String
    "All values containing the given string."
    consumables_contains: String
    "All values ending with the given string."
    consumables_ends_with: String
    "All values greater than the given value."
    consumables_gt: String
    "All values greater than or equal the given value."
    consumables_gte: String
    "All values that are contained in given list."
    consumables_in: [String!]
    "All values less than the given value."
    consumables_lt: String
    "All values less than or equal the given value."
    consumables_lte: String
    "All values that are not equal to given value."
    consumables_not: String
    "All values not containing the given string."
    consumables_not_contains: String
    "All values not ending with the given string."
    consumables_not_ends_with: String
    "All values that are not contained in given list."
    consumables_not_in: [String!]
    "All values not starting with the given string."
    consumables_not_starts_with: String
    "All values starting with the given string."
    consumables_starts_with: String
    costInCredits: Int
    "All values greater than the given value."
    costInCredits_gt: Int
    "All values greater than or equal the given value."
    costInCredits_gte: Int
    "All values that are contained in given list."
    costInCredits_in: [Int!]
    "All values less than the given value."
    costInCredits_lt: Int
    "All values less than or equal the given value."
    costInCredits_lte: Int
    "All values that are not equal to given value."
    costInCredits_not: Int
    "All values that are not contained in given list."
    costInCredits_not_in: [Int!]
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    crew: Int
    "All values greater than the given value."
    crew_gt: Int
    "All values greater than or equal the given value."
    crew_gte: Int
    "All values that are contained in given list."
    crew_in: [Int!]
    "All values less than the given value."
    crew_lt: Int
    "All values less than or equal the given value."
    crew_lte: Int
    "All values that are not equal to given value."
    crew_not: Int
    "All values that are not contained in given list."
    crew_not_in: [Int!]
    films_every: FilmFilter
    films_none: FilmFilter
    films_some: FilmFilter
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isPublished: Boolean
    "All values that are not equal to given value."
    isPublished_not: Boolean
    length: Float
    "All values greater than the given value."
    length_gt: Float
    "All values greater than or equal the given value."
    length_gte: Float
    "All values that are contained in given list."
    length_in: [Float!]
    "All values less than the given value."
    length_lt: Float
    "All values less than or equal the given value."
    length_lte: Float
    "All values that are not equal to given value."
    length_not: Float
    "All values that are not contained in given list."
    length_not_in: [Float!]
    maxAtmospheringSpeed: Int
    "All values greater than the given value."
    maxAtmospheringSpeed_gt: Int
    "All values greater than or equal the given value."
    maxAtmospheringSpeed_gte: Int
    "All values that are contained in given list."
    maxAtmospheringSpeed_in: [Int!]
    "All values less than the given value."
    maxAtmospheringSpeed_lt: Int
    "All values less than or equal the given value."
    maxAtmospheringSpeed_lte: Int
    "All values that are not equal to given value."
    maxAtmospheringSpeed_not: Int
    "All values that are not contained in given list."
    maxAtmospheringSpeed_not_in: [Int!]
    model: String
    "All values containing the given string."
    model_contains: String
    "All values ending with the given string."
    model_ends_with: String
    "All values greater than the given value."
    model_gt: String
    "All values greater than or equal the given value."
    model_gte: String
    "All values that are contained in given list."
    model_in: [String!]
    "All values less than the given value."
    model_lt: String
    "All values less than or equal the given value."
    model_lte: String
    "All values that are not equal to given value."
    model_not: String
    "All values not containing the given string."
    model_not_contains: String
    "All values not ending with the given string."
    model_not_ends_with: String
    "All values that are not contained in given list."
    model_not_in: [String!]
    "All values not starting with the given string."
    model_not_starts_with: String
    "All values starting with the given string."
    model_starts_with: String
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    passengers: Int
    "All values greater than the given value."
    passengers_gt: Int
    "All values greater than or equal the given value."
    passengers_gte: Int
    "All values that are contained in given list."
    passengers_in: [Int!]
    "All values less than the given value."
    passengers_lt: Int
    "All values less than or equal the given value."
    passengers_lte: Int
    "All values that are not equal to given value."
    passengers_not: Int
    "All values that are not contained in given list."
    passengers_not_in: [Int!]
    pilots_every: PersonFilter
    pilots_none: PersonFilter
    pilots_some: PersonFilter
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input VehiclefilmsFilm {
    characters: [FilmcharactersPerson!]
    charactersIds: [ID!]
    "The name of the director of this film."
    director: String
    "The episode number of this film."
    episodeId: Int!
    "indicates if the record is published"
    isPublished: Boolean
    "The opening paragraphs at the beginning of this film."
    openingCrawl: String
    planets: [FilmplanetsPlanet!]
    planetsIds: [ID!]
    "The names of the producers of this film."
    producers: [String!]
    " The ISO 8601 date format of film release at original creator country."
    releaseDate: DateTime
    species: [FilmspeciesSpecies!]
    speciesIds: [ID!]
    starships: [FilmstarshipsStarship!]
    starshipsIds: [ID!]
    "The title of this film"
    title: String!
    vehicles: [FilmvehiclesVehicle!]
    vehiclesIds: [ID!]
}

input VehiclepilotsPerson {
    "The birth year of the person, using the in-universe standard of BBY or ABY - Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope."
    birthYear: String
    "The eye color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have an eye."
    eyeColor: [PERSON_EYE_COLOR!]
    films: [PersonfilmsFilm!]
    filmsIds: [ID!]
    " The gender of this person. Will be \"UNKNOWN\" if not known or null if the person does not have a gender."
    gender: PERSON_GENDER
    "The hair color of this person. Will be \"UNKNOWN\" if not known or null if the person does not have hair."
    hairColor: [PERSON_HAIR_COLOR!]
    "The height of the person in centimeters."
    height: Int
    homeworld: PersonhomeworldPlanet
    homeworldId: ID
    "indicates if the record is published"
    isPublished: Boolean
    "The mass of the person in kilograms."
    mass: Float
    "The name of this person."
    name: String!
    "The skin color of this person."
    skinColor: [PERSON_SKIN_COLOR!]
    species: [PersonspeciesSpecies!]
    speciesIds: [ID!]
    starships: [PersonstarshipsStarship!]
    starshipsIds: [ID!]
    vehicles: [PersonvehiclesVehicle!]
    vehiclesIds: [ID!]
}


scalar DateTime
